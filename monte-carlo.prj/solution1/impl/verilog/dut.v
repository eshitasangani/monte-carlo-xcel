// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dut,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=13.434000,HLS_SYN_LAT=85005987,HLS_SYN_TPT=none,HLS_SYN_MEM=128,HLS_SYN_DSP=177,HLS_SYN_FF=16468,HLS_SYN_LUT=22091,HLS_VERSION=2019_2_1}" *)

module dut (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        strm_out_V_V_din,
        strm_out_V_V_full_n,
        strm_out_V_V_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] strm_out_V_V_din;
input   strm_out_V_V_full_n;
output   strm_out_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] strm_out_V_V_din;
reg strm_out_V_V_write;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    strm_out_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg   [31:0] result_call_reg_589;
wire    grp_monte_carlo_both_pri_fu_79_ap_ready;
wire    grp_monte_carlo_both_pri_fu_79_ap_done;
reg   [31:0] result_put_reg_594;
wire   [31:0] reg_V_fu_93_p1;
reg   [31:0] reg_V_reg_599;
reg   [0:0] p_Result_s_reg_604;
wire   [23:0] tmp_fu_126_p3;
reg   [23:0] tmp_reg_609;
wire   [0:0] icmp_ln278_fu_134_p2;
reg   [0:0] icmp_ln278_reg_614;
wire   [0:0] icmp_ln285_fu_162_p2;
reg   [0:0] icmp_ln285_reg_619;
wire  signed [8:0] sh_amt_1_fu_168_p2;
reg  signed [8:0] sh_amt_1_reg_624;
wire   [0:0] and_ln284_fu_228_p2;
reg   [0:0] and_ln284_reg_629;
wire   [23:0] select_ln285_fu_240_p3;
reg   [23:0] select_ln285_reg_634;
wire   [0:0] and_ln295_fu_260_p2;
reg   [0:0] and_ln295_reg_639;
wire   [31:0] tmp_V_fu_334_p3;
reg   [31:0] tmp_V_reg_644;
wire   [31:0] reg_V_1_fu_341_p1;
reg   [31:0] reg_V_1_reg_649;
reg   [0:0] p_Result_6_reg_654;
wire   [23:0] tmp_4_fu_374_p3;
reg   [23:0] tmp_4_reg_659;
wire   [0:0] icmp_ln278_1_fu_382_p2;
reg   [0:0] icmp_ln278_1_reg_664;
wire   [0:0] icmp_ln285_1_fu_410_p2;
reg   [0:0] icmp_ln285_1_reg_669;
wire  signed [8:0] sh_amt_3_fu_416_p2;
reg  signed [8:0] sh_amt_3_reg_674;
wire   [0:0] and_ln284_1_fu_476_p2;
reg   [0:0] and_ln284_1_reg_679;
wire   [23:0] select_ln285_2_fu_488_p3;
reg   [23:0] select_ln285_2_reg_684;
wire   [0:0] and_ln295_1_fu_508_p2;
reg   [0:0] and_ln295_1_reg_689;
wire   [31:0] tmp_V_4_fu_582_p3;
reg   [31:0] tmp_V_4_reg_694;
wire    grp_monte_carlo_both_pri_fu_79_ap_start;
wire    grp_monte_carlo_both_pri_fu_79_ap_idle;
wire   [31:0] grp_monte_carlo_both_pri_fu_79_ap_return_0;
wire   [31:0] grp_monte_carlo_both_pri_fu_79_ap_return_1;
reg    grp_monte_carlo_both_pri_fu_79_ap_start_reg;
reg    ap_block_state1;
wire   [7:0] p_Result_s_14_fu_108_p4;
wire   [22:0] trunc_ln270_fu_122_p1;
wire   [30:0] trunc_ln262_fu_96_p1;
wire   [8:0] exp_V_fu_118_p1;
wire  signed [8:0] sh_amt_fu_140_p2;
wire   [3:0] tmp_15_fu_174_p4;
wire  signed [23:0] sext_ln281_fu_146_p1;
wire   [0:0] icmp_ln282_fu_150_p2;
wire   [0:0] xor_ln278_fu_196_p2;
wire   [0:0] and_ln282_fu_202_p2;
wire   [0:0] or_ln282_fu_216_p2;
wire   [0:0] icmp_ln284_fu_156_p2;
wire   [0:0] xor_ln282_fu_222_p2;
wire   [0:0] and_ln285_fu_234_p2;
wire   [23:0] lshr_ln286_fu_190_p2;
wire   [23:0] select_ln282_fu_208_p3;
wire   [0:0] or_ln284_fu_248_p2;
wire   [0:0] icmp_ln295_fu_184_p2;
wire   [0:0] xor_ln284_fu_254_p2;
wire   [0:0] tmp_16_fu_272_p3;
wire   [31:0] zext_ln283_fu_266_p1;
wire  signed [31:0] sext_ln294_fu_269_p1;
wire   [31:0] shl_ln297_fu_287_p2;
wire   [31:0] zext_ln285_fu_293_p1;
wire   [31:0] select_ln295_fu_296_p3;
wire   [0:0] xor_ln285_fu_310_p2;
wire   [0:0] and_ln285_1_fu_315_p2;
wire   [31:0] select_ln288_fu_279_p3;
wire   [31:0] select_ln278_fu_303_p3;
wire   [31:0] select_ln285_1_fu_320_p3;
wire   [31:0] sub_ln461_fu_328_p2;
wire   [7:0] p_Result_2_fu_356_p4;
wire   [22:0] trunc_ln270_1_fu_370_p1;
wire   [30:0] trunc_ln262_1_fu_344_p1;
wire   [8:0] exp_V_1_fu_366_p1;
wire  signed [8:0] sh_amt_2_fu_388_p2;
wire   [3:0] tmp_18_fu_422_p4;
wire  signed [23:0] sext_ln281_1_fu_394_p1;
wire   [0:0] icmp_ln282_1_fu_398_p2;
wire   [0:0] xor_ln278_1_fu_444_p2;
wire   [0:0] and_ln282_1_fu_450_p2;
wire   [0:0] or_ln282_1_fu_464_p2;
wire   [0:0] icmp_ln284_1_fu_404_p2;
wire   [0:0] xor_ln282_1_fu_470_p2;
wire   [0:0] and_ln285_2_fu_482_p2;
wire   [23:0] lshr_ln286_1_fu_438_p2;
wire   [23:0] select_ln282_1_fu_456_p3;
wire   [0:0] or_ln284_1_fu_496_p2;
wire   [0:0] icmp_ln295_1_fu_432_p2;
wire   [0:0] xor_ln284_1_fu_502_p2;
wire   [0:0] tmp_19_fu_520_p3;
wire   [31:0] zext_ln283_1_fu_514_p1;
wire  signed [31:0] sext_ln294_1_fu_517_p1;
wire   [31:0] shl_ln297_1_fu_535_p2;
wire   [31:0] zext_ln285_1_fu_541_p1;
wire   [31:0] select_ln295_1_fu_544_p3;
wire   [0:0] xor_ln285_1_fu_558_p2;
wire   [0:0] and_ln285_3_fu_563_p2;
wire   [31:0] select_ln288_1_fu_527_p3;
wire   [31:0] select_ln278_1_fu_551_p3;
wire   [31:0] select_ln285_3_fu_568_p3;
wire   [31:0] sub_ln461_1_fu_576_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 grp_monte_carlo_both_pri_fu_79_ap_start_reg = 1'b0;
end

monte_carlo_both_pri grp_monte_carlo_both_pri_fu_79(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_monte_carlo_both_pri_fu_79_ap_start),
    .ap_done(grp_monte_carlo_both_pri_fu_79_ap_done),
    .ap_idle(grp_monte_carlo_both_pri_fu_79_ap_idle),
    .ap_ready(grp_monte_carlo_both_pri_fu_79_ap_ready),
    .ap_return_0(grp_monte_carlo_both_pri_fu_79_ap_return_0),
    .ap_return_1(grp_monte_carlo_both_pri_fu_79_ap_return_1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_monte_carlo_both_pri_fu_79_ap_start_reg <= 1'b0;
    end else begin
        if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_monte_carlo_both_pri_fu_79_ap_start_reg <= 1'b1;
        end else if ((grp_monte_carlo_both_pri_fu_79_ap_ready == 1'b1)) begin
            grp_monte_carlo_both_pri_fu_79_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        and_ln284_1_reg_679 <= and_ln284_1_fu_476_p2;
        and_ln295_1_reg_689 <= and_ln295_1_fu_508_p2;
        icmp_ln278_1_reg_664 <= icmp_ln278_1_fu_382_p2;
        icmp_ln285_1_reg_669 <= icmp_ln285_1_fu_410_p2;
        p_Result_6_reg_654 <= reg_V_1_fu_341_p1[32'd31];
        reg_V_1_reg_649 <= reg_V_1_fu_341_p1;
        select_ln285_2_reg_684 <= select_ln285_2_fu_488_p3;
        sh_amt_3_reg_674 <= sh_amt_3_fu_416_p2;
        tmp_4_reg_659[22 : 0] <= tmp_4_fu_374_p3[22 : 0];
        tmp_V_reg_644 <= tmp_V_fu_334_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        and_ln284_reg_629 <= and_ln284_fu_228_p2;
        and_ln295_reg_639 <= and_ln295_fu_260_p2;
        icmp_ln278_reg_614 <= icmp_ln278_fu_134_p2;
        icmp_ln285_reg_619 <= icmp_ln285_fu_162_p2;
        p_Result_s_reg_604 <= reg_V_fu_93_p1[32'd31];
        reg_V_reg_599 <= reg_V_fu_93_p1;
        select_ln285_reg_634 <= select_ln285_fu_240_p3;
        sh_amt_1_reg_624 <= sh_amt_1_fu_168_p2;
        tmp_reg_609[22 : 0] <= tmp_fu_126_p3[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((grp_monte_carlo_both_pri_fu_79_ap_done == 1'b0) | (strm_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        result_call_reg_589 <= grp_monte_carlo_both_pri_fu_79_ap_return_0;
        result_put_reg_594 <= grp_monte_carlo_both_pri_fu_79_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_V_4_reg_694 <= tmp_V_4_fu_582_p3;
    end
end

always @ (*) begin
    if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        strm_out_V_V_blk_n = strm_out_V_V_full_n;
    end else begin
        strm_out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        strm_out_V_V_din = tmp_V_4_reg_694;
    end else if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        strm_out_V_V_din = tmp_V_reg_644;
    end else if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        strm_out_V_V_din = 32'd1;
    end else if ((((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | (~((grp_monte_carlo_both_pri_fu_79_ap_done == 1'b0) | (strm_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)))) begin
        strm_out_V_V_din = 32'd0;
    end else if ((((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        strm_out_V_V_din = 32'd100;
    end else if ((~((strm_out_V_V_full_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        strm_out_V_V_din = 32'd1000000;
    end else begin
        strm_out_V_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | (~((grp_monte_carlo_both_pri_fu_79_ap_done == 1'b0) | (strm_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | ((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | (~((strm_out_V_V_full_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        strm_out_V_V_write = 1'b1;
    end else begin
        strm_out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((strm_out_V_V_full_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((grp_monte_carlo_both_pri_fu_79_ap_done == 1'b0) | (strm_out_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln282_1_fu_450_p2 = (xor_ln278_1_fu_444_p2 & icmp_ln282_1_fu_398_p2);

assign and_ln282_fu_202_p2 = (xor_ln278_fu_196_p2 & icmp_ln282_fu_150_p2);

assign and_ln284_1_fu_476_p2 = (xor_ln282_1_fu_470_p2 & icmp_ln284_1_fu_404_p2);

assign and_ln284_fu_228_p2 = (xor_ln282_fu_222_p2 & icmp_ln284_fu_156_p2);

assign and_ln285_1_fu_315_p2 = (xor_ln285_fu_310_p2 & and_ln284_reg_629);

assign and_ln285_2_fu_482_p2 = (icmp_ln285_1_fu_410_p2 & and_ln284_1_fu_476_p2);

assign and_ln285_3_fu_563_p2 = (xor_ln285_1_fu_558_p2 & and_ln284_1_reg_679);

assign and_ln285_fu_234_p2 = (icmp_ln285_fu_162_p2 & and_ln284_fu_228_p2);

assign and_ln295_1_fu_508_p2 = (xor_ln284_1_fu_502_p2 & icmp_ln295_1_fu_432_p2);

assign and_ln295_fu_260_p2 = (xor_ln284_fu_254_p2 & icmp_ln295_fu_184_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((strm_out_V_V_full_n == 1'b0) | (ap_start == 1'b0));
end

assign exp_V_1_fu_366_p1 = p_Result_2_fu_356_p4;

assign exp_V_fu_118_p1 = p_Result_s_14_fu_108_p4;

assign grp_monte_carlo_both_pri_fu_79_ap_start = grp_monte_carlo_both_pri_fu_79_ap_start_reg;

assign icmp_ln278_1_fu_382_p2 = ((trunc_ln262_1_fu_344_p1 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln278_fu_134_p2 = ((trunc_ln262_fu_96_p1 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln282_1_fu_398_p2 = ((p_Result_2_fu_356_p4 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln282_fu_150_p2 = ((p_Result_s_14_fu_108_p4 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln284_1_fu_404_p2 = (($signed(sh_amt_2_fu_388_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln284_fu_156_p2 = (($signed(sh_amt_fu_140_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln285_1_fu_410_p2 = (($signed(sh_amt_2_fu_388_p2) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln285_fu_162_p2 = (($signed(sh_amt_fu_140_p2) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln295_1_fu_432_p2 = (($signed(tmp_18_fu_422_p4) < $signed(4'd1)) ? 1'b1 : 1'b0);

assign icmp_ln295_fu_184_p2 = (($signed(tmp_15_fu_174_p4) < $signed(4'd1)) ? 1'b1 : 1'b0);

assign lshr_ln286_1_fu_438_p2 = tmp_4_fu_374_p3 >> sext_ln281_1_fu_394_p1;

assign lshr_ln286_fu_190_p2 = tmp_fu_126_p3 >> sext_ln281_fu_146_p1;

assign or_ln282_1_fu_464_p2 = (icmp_ln282_1_fu_398_p2 | icmp_ln278_1_fu_382_p2);

assign or_ln282_fu_216_p2 = (icmp_ln282_fu_150_p2 | icmp_ln278_fu_134_p2);

assign or_ln284_1_fu_496_p2 = (or_ln282_1_fu_464_p2 | icmp_ln284_1_fu_404_p2);

assign or_ln284_fu_248_p2 = (or_ln282_fu_216_p2 | icmp_ln284_fu_156_p2);

assign p_Result_2_fu_356_p4 = {{reg_V_1_fu_341_p1[30:23]}};

assign p_Result_s_14_fu_108_p4 = {{reg_V_fu_93_p1[30:23]}};

assign reg_V_1_fu_341_p1 = result_put_reg_594;

assign reg_V_fu_93_p1 = result_call_reg_589;

assign select_ln278_1_fu_551_p3 = ((icmp_ln278_1_reg_664[0:0] === 1'b1) ? 32'd0 : select_ln295_1_fu_544_p3);

assign select_ln278_fu_303_p3 = ((icmp_ln278_reg_614[0:0] === 1'b1) ? 32'd0 : select_ln295_fu_296_p3);

assign select_ln282_1_fu_456_p3 = ((and_ln282_1_fu_450_p2[0:0] === 1'b1) ? tmp_4_fu_374_p3 : 24'd0);

assign select_ln282_fu_208_p3 = ((and_ln282_fu_202_p2[0:0] === 1'b1) ? tmp_fu_126_p3 : 24'd0);

assign select_ln285_1_fu_320_p3 = ((and_ln285_1_fu_315_p2[0:0] === 1'b1) ? select_ln288_fu_279_p3 : select_ln278_fu_303_p3);

assign select_ln285_2_fu_488_p3 = ((and_ln285_2_fu_482_p2[0:0] === 1'b1) ? lshr_ln286_1_fu_438_p2 : select_ln282_1_fu_456_p3);

assign select_ln285_3_fu_568_p3 = ((and_ln285_3_fu_563_p2[0:0] === 1'b1) ? select_ln288_1_fu_527_p3 : select_ln278_1_fu_551_p3);

assign select_ln285_fu_240_p3 = ((and_ln285_fu_234_p2[0:0] === 1'b1) ? lshr_ln286_fu_190_p2 : select_ln282_fu_208_p3);

assign select_ln288_1_fu_527_p3 = ((tmp_19_fu_520_p3[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln288_fu_279_p3 = ((tmp_16_fu_272_p3[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln295_1_fu_544_p3 = ((and_ln295_1_reg_689[0:0] === 1'b1) ? shl_ln297_1_fu_535_p2 : zext_ln285_1_fu_541_p1);

assign select_ln295_fu_296_p3 = ((and_ln295_reg_639[0:0] === 1'b1) ? shl_ln297_fu_287_p2 : zext_ln285_fu_293_p1);

assign sext_ln281_1_fu_394_p1 = sh_amt_2_fu_388_p2;

assign sext_ln281_fu_146_p1 = sh_amt_fu_140_p2;

assign sext_ln294_1_fu_517_p1 = sh_amt_3_reg_674;

assign sext_ln294_fu_269_p1 = sh_amt_1_reg_624;

assign sh_amt_1_fu_168_p2 = ($signed(9'd0) - $signed(sh_amt_fu_140_p2));

assign sh_amt_2_fu_388_p2 = (9'd150 - exp_V_1_fu_366_p1);

assign sh_amt_3_fu_416_p2 = ($signed(9'd0) - $signed(sh_amt_2_fu_388_p2));

assign sh_amt_fu_140_p2 = (9'd150 - exp_V_fu_118_p1);

assign shl_ln297_1_fu_535_p2 = zext_ln283_1_fu_514_p1 << sext_ln294_1_fu_517_p1;

assign shl_ln297_fu_287_p2 = zext_ln283_fu_266_p1 << sext_ln294_fu_269_p1;

assign sub_ln461_1_fu_576_p2 = (32'd0 - select_ln285_3_fu_568_p3);

assign sub_ln461_fu_328_p2 = (32'd0 - select_ln285_1_fu_320_p3);

assign tmp_15_fu_174_p4 = {{sh_amt_1_fu_168_p2[8:5]}};

assign tmp_16_fu_272_p3 = reg_V_reg_599[32'd31];

assign tmp_18_fu_422_p4 = {{sh_amt_3_fu_416_p2[8:5]}};

assign tmp_19_fu_520_p3 = reg_V_1_reg_649[32'd31];

assign tmp_4_fu_374_p3 = {{1'd1}, {trunc_ln270_1_fu_370_p1}};

assign tmp_V_4_fu_582_p3 = ((p_Result_6_reg_654[0:0] === 1'b1) ? sub_ln461_1_fu_576_p2 : select_ln285_3_fu_568_p3);

assign tmp_V_fu_334_p3 = ((p_Result_s_reg_604[0:0] === 1'b1) ? sub_ln461_fu_328_p2 : select_ln285_1_fu_320_p3);

assign tmp_fu_126_p3 = {{1'd1}, {trunc_ln270_fu_122_p1}};

assign trunc_ln262_1_fu_344_p1 = reg_V_1_fu_341_p1[30:0];

assign trunc_ln262_fu_96_p1 = reg_V_fu_93_p1[30:0];

assign trunc_ln270_1_fu_370_p1 = reg_V_1_fu_341_p1[22:0];

assign trunc_ln270_fu_122_p1 = reg_V_fu_93_p1[22:0];

assign xor_ln278_1_fu_444_p2 = (icmp_ln278_1_fu_382_p2 ^ 1'd1);

assign xor_ln278_fu_196_p2 = (icmp_ln278_fu_134_p2 ^ 1'd1);

assign xor_ln282_1_fu_470_p2 = (or_ln282_1_fu_464_p2 ^ 1'd1);

assign xor_ln282_fu_222_p2 = (or_ln282_fu_216_p2 ^ 1'd1);

assign xor_ln284_1_fu_502_p2 = (or_ln284_1_fu_496_p2 ^ 1'd1);

assign xor_ln284_fu_254_p2 = (or_ln284_fu_248_p2 ^ 1'd1);

assign xor_ln285_1_fu_558_p2 = (icmp_ln285_1_reg_669 ^ 1'd1);

assign xor_ln285_fu_310_p2 = (icmp_ln285_reg_619 ^ 1'd1);

assign zext_ln283_1_fu_514_p1 = tmp_4_reg_659;

assign zext_ln283_fu_266_p1 = tmp_reg_609;

assign zext_ln285_1_fu_541_p1 = select_ln285_2_reg_684;

assign zext_ln285_fu_293_p1 = select_ln285_reg_634;

always @ (posedge ap_clk) begin
    tmp_reg_609[23] <= 1'b1;
    tmp_4_reg_659[23] <= 1'b1;
end

endmodule //dut
