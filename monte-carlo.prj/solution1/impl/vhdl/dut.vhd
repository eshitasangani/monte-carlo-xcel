-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    strm_out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    strm_out_V_V_full_n : IN STD_LOGIC;
    strm_out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of dut is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dut,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=13.434000,HLS_SYN_LAT=85005987,HLS_SYN_TPT=none,HLS_SYN_MEM=128,HLS_SYN_DSP=177,HLS_SYN_FF=16468,HLS_SYN_LUT=22091,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_F4240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000011110100001001000000";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv9_96 : STD_LOGIC_VECTOR (8 downto 0) := "010010110";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal strm_out_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal result_call_reg_589 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_monte_carlo_both_pri_fu_79_ap_ready : STD_LOGIC;
    signal grp_monte_carlo_both_pri_fu_79_ap_done : STD_LOGIC;
    signal result_put_reg_594 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_fu_93_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_reg_599 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_604 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_126_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_reg_609 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln278_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_reg_614 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_reg_619 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_1_fu_168_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_1_reg_624 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln284_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_reg_629 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_fu_240_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln285_reg_634 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln295_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_reg_639 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_334_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_reg_644 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_1_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_V_1_reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_reg_654 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_374_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_reg_659 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln278_1_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln278_1_reg_664 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_1_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_1_reg_669 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_3_fu_416_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_3_reg_674 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln284_1_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_1_reg_679 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_2_fu_488_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln285_2_reg_684 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln295_1_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln295_1_reg_689 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_4_fu_582_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_4_reg_694 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_monte_carlo_both_pri_fu_79_ap_start : STD_LOGIC;
    signal grp_monte_carlo_both_pri_fu_79_ap_idle : STD_LOGIC;
    signal grp_monte_carlo_both_pri_fu_79_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_monte_carlo_both_pri_fu_79_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_monte_carlo_both_pri_fu_79_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal p_Result_s_14_fu_108_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln270_fu_122_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln262_fu_96_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_fu_118_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_fu_140_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_fu_174_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln281_fu_146_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln282_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln282_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln286_fu_190_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_fu_208_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln284_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_272_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln283_fu_266_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294_fu_269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln297_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln285_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln295_fu_296_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln285_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_1_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_fu_279_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln278_fu_303_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln285_1_fu_320_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln461_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_fu_356_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln270_1_fu_370_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln262_1_fu_344_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal exp_V_1_fu_366_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_amt_2_fu_388_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_18_fu_422_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln281_1_fu_394_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln282_1_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_1_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln282_1_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln282_1_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_1_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_1_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_2_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln286_1_fu_438_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln282_1_fu_456_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln284_1_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_1_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln284_1_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_520_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln283_1_fu_514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln294_1_fu_517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln297_1_fu_535_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln285_1_fu_541_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln295_1_fu_544_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln285_1_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_3_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_1_fu_527_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln278_1_fu_551_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln285_3_fu_568_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln461_1_fu_576_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component monte_carlo_both_pri IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_monte_carlo_both_pri_fu_79 : component monte_carlo_both_pri
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_monte_carlo_both_pri_fu_79_ap_start,
        ap_done => grp_monte_carlo_both_pri_fu_79_ap_done,
        ap_idle => grp_monte_carlo_both_pri_fu_79_ap_idle,
        ap_ready => grp_monte_carlo_both_pri_fu_79_ap_ready,
        ap_return_0 => grp_monte_carlo_both_pri_fu_79_ap_return_0,
        ap_return_1 => grp_monte_carlo_both_pri_fu_79_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_monte_carlo_both_pri_fu_79_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_monte_carlo_both_pri_fu_79_ap_start_reg <= ap_const_logic_0;
            else
                if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_monte_carlo_both_pri_fu_79_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_monte_carlo_both_pri_fu_79_ap_ready = ap_const_logic_1)) then 
                    grp_monte_carlo_both_pri_fu_79_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                and_ln284_1_reg_679 <= and_ln284_1_fu_476_p2;
                and_ln295_1_reg_689 <= and_ln295_1_fu_508_p2;
                icmp_ln278_1_reg_664 <= icmp_ln278_1_fu_382_p2;
                icmp_ln285_1_reg_669 <= icmp_ln285_1_fu_410_p2;
                p_Result_6_reg_654 <= reg_V_1_fu_341_p1(31 downto 31);
                reg_V_1_reg_649 <= reg_V_1_fu_341_p1;
                select_ln285_2_reg_684 <= select_ln285_2_fu_488_p3;
                sh_amt_3_reg_674 <= sh_amt_3_fu_416_p2;
                    tmp_4_reg_659(22 downto 0) <= tmp_4_fu_374_p3(22 downto 0);
                tmp_V_reg_644 <= tmp_V_fu_334_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                and_ln284_reg_629 <= and_ln284_fu_228_p2;
                and_ln295_reg_639 <= and_ln295_fu_260_p2;
                icmp_ln278_reg_614 <= icmp_ln278_fu_134_p2;
                icmp_ln285_reg_619 <= icmp_ln285_fu_162_p2;
                p_Result_s_reg_604 <= reg_V_fu_93_p1(31 downto 31);
                reg_V_reg_599 <= reg_V_fu_93_p1;
                select_ln285_reg_634 <= select_ln285_fu_240_p3;
                sh_amt_1_reg_624 <= sh_amt_1_fu_168_p2;
                    tmp_reg_609(22 downto 0) <= tmp_fu_126_p3(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((grp_monte_carlo_both_pri_fu_79_ap_done = ap_const_logic_0) or (strm_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                result_call_reg_589 <= grp_monte_carlo_both_pri_fu_79_ap_return_0;
                result_put_reg_594 <= grp_monte_carlo_both_pri_fu_79_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_V_4_reg_694 <= tmp_V_4_fu_582_p3;
            end if;
        end if;
    end process;
    tmp_reg_609(23) <= '1';
    tmp_4_reg_659(23) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, strm_out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, grp_monte_carlo_both_pri_fu_79_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((strm_out_V_V_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((grp_monte_carlo_both_pri_fu_79_ap_done = ap_const_logic_0) or (strm_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    and_ln282_1_fu_450_p2 <= (xor_ln278_1_fu_444_p2 and icmp_ln282_1_fu_398_p2);
    and_ln282_fu_202_p2 <= (xor_ln278_fu_196_p2 and icmp_ln282_fu_150_p2);
    and_ln284_1_fu_476_p2 <= (xor_ln282_1_fu_470_p2 and icmp_ln284_1_fu_404_p2);
    and_ln284_fu_228_p2 <= (xor_ln282_fu_222_p2 and icmp_ln284_fu_156_p2);
    and_ln285_1_fu_315_p2 <= (xor_ln285_fu_310_p2 and and_ln284_reg_629);
    and_ln285_2_fu_482_p2 <= (icmp_ln285_1_fu_410_p2 and and_ln284_1_fu_476_p2);
    and_ln285_3_fu_563_p2 <= (xor_ln285_1_fu_558_p2 and and_ln284_1_reg_679);
    and_ln285_fu_234_p2 <= (icmp_ln285_fu_162_p2 and and_ln284_fu_228_p2);
    and_ln295_1_fu_508_p2 <= (xor_ln284_1_fu_502_p2 and icmp_ln295_1_fu_432_p2);
    and_ln295_fu_260_p2 <= (xor_ln284_fu_254_p2 and icmp_ln295_fu_184_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state1_assign_proc : process(ap_start, strm_out_V_V_full_n)
    begin
                ap_block_state1 <= ((strm_out_V_V_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(strm_out_V_V_full_n, ap_CS_fsm_state8)
    begin
        if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(strm_out_V_V_full_n, ap_CS_fsm_state8)
    begin
        if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exp_V_1_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_2_fu_356_p4),9));
    exp_V_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_14_fu_108_p4),9));
    grp_monte_carlo_both_pri_fu_79_ap_start <= grp_monte_carlo_both_pri_fu_79_ap_start_reg;
    icmp_ln278_1_fu_382_p2 <= "1" when (trunc_ln262_1_fu_344_p1 = ap_const_lv31_0) else "0";
    icmp_ln278_fu_134_p2 <= "1" when (trunc_ln262_fu_96_p1 = ap_const_lv31_0) else "0";
    icmp_ln282_1_fu_398_p2 <= "1" when (p_Result_2_fu_356_p4 = ap_const_lv8_96) else "0";
    icmp_ln282_fu_150_p2 <= "1" when (p_Result_s_14_fu_108_p4 = ap_const_lv8_96) else "0";
    icmp_ln284_1_fu_404_p2 <= "1" when (signed(sh_amt_2_fu_388_p2) > signed(ap_const_lv9_0)) else "0";
    icmp_ln284_fu_156_p2 <= "1" when (signed(sh_amt_fu_140_p2) > signed(ap_const_lv9_0)) else "0";
    icmp_ln285_1_fu_410_p2 <= "1" when (signed(sh_amt_2_fu_388_p2) < signed(ap_const_lv9_19)) else "0";
    icmp_ln285_fu_162_p2 <= "1" when (signed(sh_amt_fu_140_p2) < signed(ap_const_lv9_19)) else "0";
    icmp_ln295_1_fu_432_p2 <= "1" when (signed(tmp_18_fu_422_p4) < signed(ap_const_lv4_1)) else "0";
    icmp_ln295_fu_184_p2 <= "1" when (signed(tmp_15_fu_174_p4) < signed(ap_const_lv4_1)) else "0";
    lshr_ln286_1_fu_438_p2 <= std_logic_vector(shift_right(unsigned(tmp_4_fu_374_p3),to_integer(unsigned('0' & sext_ln281_1_fu_394_p1(24-1 downto 0)))));
    lshr_ln286_fu_190_p2 <= std_logic_vector(shift_right(unsigned(tmp_fu_126_p3),to_integer(unsigned('0' & sext_ln281_fu_146_p1(24-1 downto 0)))));
    or_ln282_1_fu_464_p2 <= (icmp_ln282_1_fu_398_p2 or icmp_ln278_1_fu_382_p2);
    or_ln282_fu_216_p2 <= (icmp_ln282_fu_150_p2 or icmp_ln278_fu_134_p2);
    or_ln284_1_fu_496_p2 <= (or_ln282_1_fu_464_p2 or icmp_ln284_1_fu_404_p2);
    or_ln284_fu_248_p2 <= (or_ln282_fu_216_p2 or icmp_ln284_fu_156_p2);
    p_Result_2_fu_356_p4 <= reg_V_1_fu_341_p1(30 downto 23);
    p_Result_s_14_fu_108_p4 <= reg_V_fu_93_p1(30 downto 23);
    reg_V_1_fu_341_p1 <= result_put_reg_594;
    reg_V_fu_93_p1 <= result_call_reg_589;
    select_ln278_1_fu_551_p3 <= 
        ap_const_lv32_0 when (icmp_ln278_1_reg_664(0) = '1') else 
        select_ln295_1_fu_544_p3;
    select_ln278_fu_303_p3 <= 
        ap_const_lv32_0 when (icmp_ln278_reg_614(0) = '1') else 
        select_ln295_fu_296_p3;
    select_ln282_1_fu_456_p3 <= 
        tmp_4_fu_374_p3 when (and_ln282_1_fu_450_p2(0) = '1') else 
        ap_const_lv24_0;
    select_ln282_fu_208_p3 <= 
        tmp_fu_126_p3 when (and_ln282_fu_202_p2(0) = '1') else 
        ap_const_lv24_0;
    select_ln285_1_fu_320_p3 <= 
        select_ln288_fu_279_p3 when (and_ln285_1_fu_315_p2(0) = '1') else 
        select_ln278_fu_303_p3;
    select_ln285_2_fu_488_p3 <= 
        lshr_ln286_1_fu_438_p2 when (and_ln285_2_fu_482_p2(0) = '1') else 
        select_ln282_1_fu_456_p3;
    select_ln285_3_fu_568_p3 <= 
        select_ln288_1_fu_527_p3 when (and_ln285_3_fu_563_p2(0) = '1') else 
        select_ln278_1_fu_551_p3;
    select_ln285_fu_240_p3 <= 
        lshr_ln286_fu_190_p2 when (and_ln285_fu_234_p2(0) = '1') else 
        select_ln282_fu_208_p3;
    select_ln288_1_fu_527_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_19_fu_520_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln288_fu_279_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_16_fu_272_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln295_1_fu_544_p3 <= 
        shl_ln297_1_fu_535_p2 when (and_ln295_1_reg_689(0) = '1') else 
        zext_ln285_1_fu_541_p1;
    select_ln295_fu_296_p3 <= 
        shl_ln297_fu_287_p2 when (and_ln295_reg_639(0) = '1') else 
        zext_ln285_fu_293_p1;
        sext_ln281_1_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_2_fu_388_p2),24));

        sext_ln281_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_140_p2),24));

        sext_ln294_1_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_3_reg_674),32));

        sext_ln294_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_1_reg_624),32));

    sh_amt_1_fu_168_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_fu_140_p2));
    sh_amt_2_fu_388_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_1_fu_366_p1));
    sh_amt_3_fu_416_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sh_amt_2_fu_388_p2));
    sh_amt_fu_140_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(exp_V_fu_118_p1));
    shl_ln297_1_fu_535_p2 <= std_logic_vector(shift_left(unsigned(zext_ln283_1_fu_514_p1),to_integer(unsigned('0' & sext_ln294_1_fu_517_p1(31-1 downto 0)))));
    shl_ln297_fu_287_p2 <= std_logic_vector(shift_left(unsigned(zext_ln283_fu_266_p1),to_integer(unsigned('0' & sext_ln294_fu_269_p1(31-1 downto 0)))));

    strm_out_V_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, strm_out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            strm_out_V_V_blk_n <= strm_out_V_V_full_n;
        else 
            strm_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_out_V_V_din_assign_proc : process(ap_start, ap_CS_fsm_state1, strm_out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, grp_monte_carlo_both_pri_fu_79_ap_done, tmp_V_reg_644, tmp_V_4_reg_694)
    begin
        if (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            strm_out_V_V_din <= tmp_V_4_reg_694;
        elsif (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            strm_out_V_V_din <= tmp_V_reg_644;
        elsif (((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            strm_out_V_V_din <= ap_const_lv32_1;
        elsif ((((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((grp_monte_carlo_both_pri_fu_79_ap_done = ap_const_logic_0) or (strm_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            strm_out_V_V_din <= ap_const_lv32_0;
        elsif ((((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            strm_out_V_V_din <= ap_const_lv32_64;
        elsif ((not(((strm_out_V_V_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            strm_out_V_V_din <= ap_const_lv32_F4240;
        else 
            strm_out_V_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    strm_out_V_V_write_assign_proc : process(ap_start, ap_CS_fsm_state1, strm_out_V_V_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, grp_monte_carlo_both_pri_fu_79_ap_done)
    begin
        if ((((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((grp_monte_carlo_both_pri_fu_79_ap_done = ap_const_logic_0) or (strm_out_V_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((strm_out_V_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((strm_out_V_V_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            strm_out_V_V_write <= ap_const_logic_1;
        else 
            strm_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln461_1_fu_576_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln285_3_fu_568_p3));
    sub_ln461_fu_328_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln285_1_fu_320_p3));
    tmp_15_fu_174_p4 <= sh_amt_1_fu_168_p2(8 downto 5);
    tmp_16_fu_272_p3 <= reg_V_reg_599(31 downto 31);
    tmp_18_fu_422_p4 <= sh_amt_3_fu_416_p2(8 downto 5);
    tmp_19_fu_520_p3 <= reg_V_1_reg_649(31 downto 31);
    tmp_4_fu_374_p3 <= (ap_const_lv1_1 & trunc_ln270_1_fu_370_p1);
    tmp_V_4_fu_582_p3 <= 
        sub_ln461_1_fu_576_p2 when (p_Result_6_reg_654(0) = '1') else 
        select_ln285_3_fu_568_p3;
    tmp_V_fu_334_p3 <= 
        sub_ln461_fu_328_p2 when (p_Result_s_reg_604(0) = '1') else 
        select_ln285_1_fu_320_p3;
    tmp_fu_126_p3 <= (ap_const_lv1_1 & trunc_ln270_fu_122_p1);
    trunc_ln262_1_fu_344_p1 <= reg_V_1_fu_341_p1(31 - 1 downto 0);
    trunc_ln262_fu_96_p1 <= reg_V_fu_93_p1(31 - 1 downto 0);
    trunc_ln270_1_fu_370_p1 <= reg_V_1_fu_341_p1(23 - 1 downto 0);
    trunc_ln270_fu_122_p1 <= reg_V_fu_93_p1(23 - 1 downto 0);
    xor_ln278_1_fu_444_p2 <= (icmp_ln278_1_fu_382_p2 xor ap_const_lv1_1);
    xor_ln278_fu_196_p2 <= (icmp_ln278_fu_134_p2 xor ap_const_lv1_1);
    xor_ln282_1_fu_470_p2 <= (or_ln282_1_fu_464_p2 xor ap_const_lv1_1);
    xor_ln282_fu_222_p2 <= (or_ln282_fu_216_p2 xor ap_const_lv1_1);
    xor_ln284_1_fu_502_p2 <= (or_ln284_1_fu_496_p2 xor ap_const_lv1_1);
    xor_ln284_fu_254_p2 <= (or_ln284_fu_248_p2 xor ap_const_lv1_1);
    xor_ln285_1_fu_558_p2 <= (icmp_ln285_1_reg_669 xor ap_const_lv1_1);
    xor_ln285_fu_310_p2 <= (icmp_ln285_reg_619 xor ap_const_lv1_1);
    zext_ln283_1_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_659),32));
    zext_ln283_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_609),32));
    zext_ln285_1_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln285_2_reg_684),32));
    zext_ln285_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln285_reg_634),32));
end behav;
