// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module monte_carlo_both_pri (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 112'd1;
parameter    ap_ST_fsm_state2 = 112'd2;
parameter    ap_ST_fsm_state3 = 112'd4;
parameter    ap_ST_fsm_state4 = 112'd8;
parameter    ap_ST_fsm_state5 = 112'd16;
parameter    ap_ST_fsm_state6 = 112'd32;
parameter    ap_ST_fsm_state7 = 112'd64;
parameter    ap_ST_fsm_state8 = 112'd128;
parameter    ap_ST_fsm_state9 = 112'd256;
parameter    ap_ST_fsm_state10 = 112'd512;
parameter    ap_ST_fsm_state11 = 112'd1024;
parameter    ap_ST_fsm_state12 = 112'd2048;
parameter    ap_ST_fsm_state13 = 112'd4096;
parameter    ap_ST_fsm_state14 = 112'd8192;
parameter    ap_ST_fsm_state15 = 112'd16384;
parameter    ap_ST_fsm_state16 = 112'd32768;
parameter    ap_ST_fsm_state17 = 112'd65536;
parameter    ap_ST_fsm_state18 = 112'd131072;
parameter    ap_ST_fsm_state19 = 112'd262144;
parameter    ap_ST_fsm_state20 = 112'd524288;
parameter    ap_ST_fsm_state21 = 112'd1048576;
parameter    ap_ST_fsm_state22 = 112'd2097152;
parameter    ap_ST_fsm_state23 = 112'd4194304;
parameter    ap_ST_fsm_state24 = 112'd8388608;
parameter    ap_ST_fsm_state25 = 112'd16777216;
parameter    ap_ST_fsm_state26 = 112'd33554432;
parameter    ap_ST_fsm_state27 = 112'd67108864;
parameter    ap_ST_fsm_state28 = 112'd134217728;
parameter    ap_ST_fsm_state29 = 112'd268435456;
parameter    ap_ST_fsm_state30 = 112'd536870912;
parameter    ap_ST_fsm_state31 = 112'd1073741824;
parameter    ap_ST_fsm_state32 = 112'd2147483648;
parameter    ap_ST_fsm_state33 = 112'd4294967296;
parameter    ap_ST_fsm_state34 = 112'd8589934592;
parameter    ap_ST_fsm_state35 = 112'd17179869184;
parameter    ap_ST_fsm_state36 = 112'd34359738368;
parameter    ap_ST_fsm_state37 = 112'd68719476736;
parameter    ap_ST_fsm_state38 = 112'd137438953472;
parameter    ap_ST_fsm_state39 = 112'd274877906944;
parameter    ap_ST_fsm_state40 = 112'd549755813888;
parameter    ap_ST_fsm_state41 = 112'd1099511627776;
parameter    ap_ST_fsm_state42 = 112'd2199023255552;
parameter    ap_ST_fsm_state43 = 112'd4398046511104;
parameter    ap_ST_fsm_state44 = 112'd8796093022208;
parameter    ap_ST_fsm_state45 = 112'd17592186044416;
parameter    ap_ST_fsm_state46 = 112'd35184372088832;
parameter    ap_ST_fsm_state47 = 112'd70368744177664;
parameter    ap_ST_fsm_state48 = 112'd140737488355328;
parameter    ap_ST_fsm_state49 = 112'd281474976710656;
parameter    ap_ST_fsm_state50 = 112'd562949953421312;
parameter    ap_ST_fsm_state51 = 112'd1125899906842624;
parameter    ap_ST_fsm_state52 = 112'd2251799813685248;
parameter    ap_ST_fsm_state53 = 112'd4503599627370496;
parameter    ap_ST_fsm_state54 = 112'd9007199254740992;
parameter    ap_ST_fsm_state55 = 112'd18014398509481984;
parameter    ap_ST_fsm_state56 = 112'd36028797018963968;
parameter    ap_ST_fsm_state57 = 112'd72057594037927936;
parameter    ap_ST_fsm_state58 = 112'd144115188075855872;
parameter    ap_ST_fsm_state59 = 112'd288230376151711744;
parameter    ap_ST_fsm_state60 = 112'd576460752303423488;
parameter    ap_ST_fsm_state61 = 112'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 112'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 112'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 112'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 112'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 112'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 112'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 112'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 112'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 112'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 112'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 112'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 112'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 112'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 112'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 112'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 112'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 112'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 112'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 112'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 112'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 112'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 112'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 112'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 112'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 112'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 112'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 112'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 112'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 112'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 112'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 112'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 112'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 112'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 112'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 112'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 112'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 112'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 112'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 112'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 112'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 112'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 112'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 112'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 112'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 112'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 112'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 112'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 112'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 112'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 112'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 112'd2596148429267413814265248164610048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [63:0] ap_return_0;
output  [63:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[63:0] ap_return_0;
reg[63:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [111:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_137_p2;
reg   [63:0] reg_193;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state69;
wire   [63:0] grp_fu_167_p2;
reg   [63:0] reg_200;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state106;
wire   [63:0] grp_fu_152_p2;
reg   [63:0] reg_206;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state64;
wire   [23:0] i_fu_219_p2;
reg   [23:0] i_reg_430;
wire    ap_CS_fsm_state2;
wire   [63:0] grp_gaussian_box_muller_fu_126_ap_return;
reg   [63:0] gauss_bm_reg_435;
wire    ap_CS_fsm_state3;
wire    grp_gaussian_box_muller_fu_126_ap_ready;
wire    grp_gaussian_box_muller_fu_126_ap_done;
wire   [63:0] bitcast_ln54_1_fu_273_p1;
wire    ap_CS_fsm_state10;
wire   [0:0] and_ln54_fu_261_p2;
wire   [0:0] icmp_ln83_fu_295_p2;
reg   [0:0] icmp_ln83_reg_448;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln83_1_fu_301_p2;
reg   [0:0] icmp_ln83_1_reg_453;
wire    ap_CS_fsm_state53;
wire   [63:0] grp_custom_exp_double_s_fu_132_ap_return;
wire    ap_CS_fsm_state59;
wire    grp_custom_exp_double_s_fu_132_ap_ready;
wire    grp_custom_exp_double_s_fu_132_ap_done;
wire   [63:0] grp_fu_145_p2;
reg   [63:0] a_assign_1_reg_471;
wire   [63:0] select_ln50_fu_359_p3;
reg   [63:0] select_ln50_reg_478;
wire    ap_CS_fsm_state71;
wire   [63:0] select_ln50_1_fu_408_p3;
reg   [63:0] select_ln50_1_reg_483;
wire    ap_CS_fsm_state76;
wire   [63:0] grp_fu_173_p2;
reg   [63:0] tmp_1_reg_498;
wire    grp_gaussian_box_muller_fu_126_ap_start;
wire    grp_gaussian_box_muller_fu_126_ap_idle;
wire    grp_custom_exp_double_s_fu_132_ap_start;
wire    grp_custom_exp_double_s_fu_132_ap_idle;
reg   [63:0] call_payoff_sum_0_reg_56;
reg   [63:0] put_payoff_sum_0_reg_68;
reg   [23:0] i_0_reg_80;
reg   [63:0] guess_0_i_reg_91;
reg   [63:0] nextGuess_reg_103;
reg   [63:0] phi_ln54_reg_116;
reg    grp_gaussian_box_muller_fu_126_ap_start_reg;
wire   [0:0] icmp_ln184_fu_213_p2;
reg    grp_custom_exp_double_s_fu_132_ap_start_reg;
reg   [63:0] grp_fu_137_p0;
reg   [63:0] grp_fu_137_p1;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state72;
reg   [63:0] grp_fu_145_p0;
reg   [63:0] grp_fu_145_p1;
reg   [63:0] grp_fu_152_p0;
reg   [63:0] grp_fu_152_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state107;
reg   [63:0] grp_fu_167_p0;
reg   [63:0] grp_fu_167_p1;
reg   [63:0] grp_fu_181_p0;
reg   [63:0] grp_fu_181_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state70;
wire   [63:0] bitcast_ln54_fu_225_p1;
wire   [10:0] tmp_fu_229_p4;
wire   [51:0] trunc_ln54_fu_239_p1;
wire   [0:0] icmp_ln54_1_fu_249_p2;
wire   [0:0] icmp_ln54_fu_243_p2;
wire   [0:0] or_ln54_fu_255_p2;
wire   [0:0] grp_fu_181_p2;
wire   [63:0] xor_ln54_fu_267_p2;
wire   [63:0] bitcast_ln83_fu_277_p1;
wire   [10:0] tmp_3_fu_281_p4;
wire   [51:0] trunc_ln83_fu_291_p1;
wire   [0:0] or_ln83_fu_307_p2;
wire   [63:0] bitcast_ln50_fu_317_p1;
wire   [10:0] tmp_s_fu_321_p4;
wire   [51:0] trunc_ln50_fu_331_p1;
wire   [0:0] icmp_ln50_1_fu_341_p2;
wire   [0:0] icmp_ln50_fu_335_p2;
wire   [0:0] or_ln50_fu_347_p2;
wire   [0:0] and_ln50_fu_353_p2;
wire   [63:0] bitcast_ln50_1_fu_367_p1;
wire   [10:0] tmp_6_fu_370_p4;
wire   [51:0] trunc_ln50_1_fu_380_p1;
wire   [0:0] icmp_ln50_3_fu_390_p2;
wire   [0:0] icmp_ln50_2_fu_384_p2;
wire   [0:0] or_ln50_1_fu_396_p2;
wire   [0:0] grp_fu_188_p2;
wire   [0:0] and_ln50_1_fu_402_p2;
wire    ap_CS_fsm_state112;
wire   [63:0] grp_fu_162_p2;
reg   [1:0] grp_fu_137_opcode;
reg   [1:0] grp_fu_145_opcode;
reg    grp_fu_152_ce;
wire   [0:0] and_ln83_fu_311_p2;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state108;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state110;
wire    ap_CS_fsm_state111;
reg   [4:0] grp_fu_181_opcode;
reg   [63:0] ap_return_0_preg;
reg   [63:0] ap_return_1_preg;
reg   [111:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 112'd1;
#0 grp_gaussian_box_muller_fu_126_ap_start_reg = 1'b0;
#0 grp_custom_exp_double_s_fu_132_ap_start_reg = 1'b0;
#0 ap_return_0_preg = 64'd0;
#0 ap_return_1_preg = 64'd0;
end

gaussian_box_muller grp_gaussian_box_muller_fu_126(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_gaussian_box_muller_fu_126_ap_start),
    .ap_done(grp_gaussian_box_muller_fu_126_ap_done),
    .ap_idle(grp_gaussian_box_muller_fu_126_ap_idle),
    .ap_ready(grp_gaussian_box_muller_fu_126_ap_ready),
    .ap_return(grp_gaussian_box_muller_fu_126_ap_return)
);

custom_exp_double_s grp_custom_exp_double_s_fu_132(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_custom_exp_double_s_fu_132_ap_start),
    .ap_done(grp_custom_exp_double_s_fu_132_ap_done),
    .ap_idle(grp_custom_exp_double_s_fu_132_ap_idle),
    .ap_ready(grp_custom_exp_double_s_fu_132_ap_ready),
    .x(reg_206),
    .ap_return(grp_custom_exp_double_s_fu_132_ap_return)
);

dut_dadddsub_64nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dut_dadddsub_64nsbkb_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_137_p0),
    .din1(grp_fu_137_p1),
    .opcode(grp_fu_137_opcode),
    .ce(1'b1),
    .dout(grp_fu_137_p2)
);

dut_dadddsub_64nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dut_dadddsub_64nsbkb_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_145_p0),
    .din1(grp_fu_145_p1),
    .opcode(grp_fu_145_opcode),
    .ce(1'b1),
    .dout(grp_fu_145_p2)
);

dut_dmul_64ns_64ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dut_dmul_64ns_64ndEe_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_152_p0),
    .din1(grp_fu_152_p1),
    .ce(grp_fu_152_ce),
    .dout(grp_fu_152_p2)
);

dut_dmul_64ns_64ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dut_dmul_64ns_64ndEe_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_reg_498),
    .din1(64'd4606743132508726950),
    .ce(1'b1),
    .dout(grp_fu_162_p2)
);

dut_ddiv_64ns_64neOg #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dut_ddiv_64ns_64neOg_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_167_p0),
    .din1(grp_fu_167_p1),
    .ce(1'b1),
    .dout(grp_fu_167_p2)
);

dut_ddiv_64ns_64neOg #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dut_ddiv_64ns_64neOg_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(put_payoff_sum_0_reg_68),
    .din1(64'd4711630319722168320),
    .ce(1'b1),
    .dout(grp_fu_173_p2)
);

dut_dcmp_64ns_64nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dut_dcmp_64ns_64nfYi_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_181_p0),
    .din1(grp_fu_181_p1),
    .ce(1'b1),
    .opcode(grp_fu_181_opcode),
    .dout(grp_fu_181_p2)
);

dut_dcmp_64ns_64nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dut_dcmp_64ns_64nfYi_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_assign_1_reg_471),
    .din1(64'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_188_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state112)) begin
            ap_return_0_preg <= grp_fu_152_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state112)) begin
            ap_return_1_preg <= grp_fu_162_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_custom_exp_double_s_fu_132_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state58)) begin
            grp_custom_exp_double_s_fu_132_ap_start_reg <= 1'b1;
        end else if ((grp_custom_exp_double_s_fu_132_ap_ready == 1'b1)) begin
            grp_custom_exp_double_s_fu_132_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_gaussian_box_muller_fu_126_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln184_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_gaussian_box_muller_fu_126_ap_start_reg <= 1'b1;
        end else if ((grp_gaussian_box_muller_fu_126_ap_ready == 1'b1)) begin
            grp_gaussian_box_muller_fu_126_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        call_payoff_sum_0_reg_56 <= grp_fu_137_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        call_payoff_sum_0_reg_56 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        guess_0_i_reg_91 <= nextGuess_reg_103;
    end else if (((1'b1 == ap_CS_fsm_state3) & (grp_gaussian_box_muller_fu_126_ap_done == 1'b1))) begin
        guess_0_i_reg_91 <= 64'd4585925428558828668;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        i_0_reg_80 <= i_reg_430;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_80 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        nextGuess_reg_103 <= grp_fu_152_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (grp_gaussian_box_muller_fu_126_ap_done == 1'b1))) begin
        nextGuess_reg_103 <= 64'd4602858963157741732;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        if ((1'd0 == and_ln54_fu_261_p2)) begin
            phi_ln54_reg_116 <= reg_193;
        end else if ((1'd1 == and_ln54_fu_261_p2)) begin
            phi_ln54_reg_116 <= bitcast_ln54_1_fu_273_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        put_payoff_sum_0_reg_68 <= grp_fu_145_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        put_payoff_sum_0_reg_68 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        a_assign_1_reg_471 <= grp_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_gaussian_box_muller_fu_126_ap_done == 1'b1))) begin
        gauss_bm_reg_435 <= grp_gaussian_box_muller_fu_126_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_430 <= i_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        icmp_ln83_1_reg_453 <= icmp_ln83_1_fu_301_p2;
        icmp_ln83_reg_448 <= icmp_ln83_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_193 <= grp_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state42))) begin
        reg_200 <= grp_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state58))) begin
        reg_206 <= grp_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        select_ln50_1_reg_483 <= select_ln50_1_fu_408_p3;
        select_ln50_reg_478 <= select_ln50_fu_359_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state106)) begin
        tmp_1_reg_498 <= grp_fu_173_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state112) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        ap_return_0 = grp_fu_152_p2;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        ap_return_1 = grp_fu_162_p2;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_137_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state43))) begin
        grp_fu_137_opcode = 2'd0;
    end else begin
        grp_fu_137_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        grp_fu_137_p0 = call_payoff_sum_0_reg_56;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_137_p0 = reg_206;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_137_p0 = nextGuess_reg_103;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_137_p0 = guess_0_i_reg_91;
    end else begin
        grp_fu_137_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        grp_fu_137_p1 = select_ln50_reg_478;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_137_p1 = 64'd13860109328209412096;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_137_p1 = reg_200;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_137_p1 = nextGuess_reg_103;
    end else begin
        grp_fu_137_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_145_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        grp_fu_145_opcode = 2'd0;
    end else begin
        grp_fu_145_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        grp_fu_145_p0 = put_payoff_sum_0_reg_68;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_145_p0 = 64'd4636737291354636288;
    end else begin
        grp_fu_145_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        grp_fu_145_p1 = select_ln50_1_reg_483;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_145_p1 = reg_206;
    end else begin
        grp_fu_145_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state58) | ((grp_custom_exp_double_s_fu_132_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state59)))) begin
        grp_fu_152_ce = 1'b1;
    end else begin
        grp_fu_152_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        grp_fu_152_p0 = reg_200;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_152_p0 = grp_custom_exp_double_s_fu_132_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_152_p0 = reg_193;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_152_p0 = nextGuess_reg_103;
    end else begin
        grp_fu_152_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        grp_fu_152_p1 = 64'd4606743132508726950;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_152_p1 = 64'd4636951596085518790;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_152_p1 = 64'd4602678819172646912;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_152_p1 = gauss_bm_reg_435;
    end else begin
        grp_fu_152_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_167_p0 = 64'd4585925428558828668;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_167_p0 = call_payoff_sum_0_reg_56;
    end else begin
        grp_fu_167_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_167_p1 = nextGuess_reg_103;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_167_p1 = 64'd4711630319722168320;
    end else begin
        grp_fu_167_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_fu_181_opcode = 5'd2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_181_opcode = 5'd3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_181_opcode = 5'd4;
    end else begin
        grp_fu_181_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_181_p0 = phi_ln54_reg_116;
    end else if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_181_p0 = reg_193;
    end else begin
        grp_fu_181_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_181_p1 = 64'd4547007122018943789;
    end else if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_181_p1 = 64'd0;
    end else begin
        grp_fu_181_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln184_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_gaussian_box_muller_fu_126_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'd0 == and_ln83_fu_311_p2) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            if (((grp_custom_exp_double_s_fu_132_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln50_1_fu_402_p2 = (or_ln50_1_fu_396_p2 & grp_fu_188_p2);

assign and_ln50_fu_353_p2 = (or_ln50_fu_347_p2 & grp_fu_181_p2);

assign and_ln54_fu_261_p2 = (or_ln54_fu_255_p2 & grp_fu_181_p2);

assign and_ln83_fu_311_p2 = (or_ln83_fu_307_p2 & grp_fu_181_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln50_1_fu_367_p1 = a_assign_1_reg_471;

assign bitcast_ln50_fu_317_p1 = reg_193;

assign bitcast_ln54_1_fu_273_p1 = xor_ln54_fu_267_p2;

assign bitcast_ln54_fu_225_p1 = reg_193;

assign bitcast_ln83_fu_277_p1 = phi_ln54_reg_116;

assign grp_custom_exp_double_s_fu_132_ap_start = grp_custom_exp_double_s_fu_132_ap_start_reg;

assign grp_gaussian_box_muller_fu_126_ap_start = grp_gaussian_box_muller_fu_126_ap_start_reg;

assign i_fu_219_p2 = (i_0_reg_80 + 24'd1);

assign icmp_ln184_fu_213_p2 = ((i_0_reg_80 == 24'd10000000) ? 1'b1 : 1'b0);

assign icmp_ln50_1_fu_341_p2 = ((trunc_ln50_fu_331_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_2_fu_384_p2 = ((tmp_6_fu_370_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln50_3_fu_390_p2 = ((trunc_ln50_1_fu_380_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_335_p2 = ((tmp_s_fu_321_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln54_1_fu_249_p2 = ((trunc_ln54_fu_239_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_243_p2 = ((tmp_fu_229_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln83_1_fu_301_p2 = ((trunc_ln83_fu_291_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_295_p2 = ((tmp_3_fu_281_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign or_ln50_1_fu_396_p2 = (icmp_ln50_3_fu_390_p2 | icmp_ln50_2_fu_384_p2);

assign or_ln50_fu_347_p2 = (icmp_ln50_fu_335_p2 | icmp_ln50_1_fu_341_p2);

assign or_ln54_fu_255_p2 = (icmp_ln54_fu_243_p2 | icmp_ln54_1_fu_249_p2);

assign or_ln83_fu_307_p2 = (icmp_ln83_reg_448 | icmp_ln83_1_reg_453);

assign select_ln50_1_fu_408_p3 = ((and_ln50_1_fu_402_p2[0:0] === 1'b1) ? a_assign_1_reg_471 : 64'd0);

assign select_ln50_fu_359_p3 = ((and_ln50_fu_353_p2[0:0] === 1'b1) ? reg_193 : 64'd0);

assign tmp_3_fu_281_p4 = {{bitcast_ln83_fu_277_p1[62:52]}};

assign tmp_6_fu_370_p4 = {{bitcast_ln50_1_fu_367_p1[62:52]}};

assign tmp_fu_229_p4 = {{bitcast_ln54_fu_225_p1[62:52]}};

assign tmp_s_fu_321_p4 = {{bitcast_ln50_fu_317_p1[62:52]}};

assign trunc_ln50_1_fu_380_p1 = bitcast_ln50_1_fu_367_p1[51:0];

assign trunc_ln50_fu_331_p1 = bitcast_ln50_fu_317_p1[51:0];

assign trunc_ln54_fu_239_p1 = bitcast_ln54_fu_225_p1[51:0];

assign trunc_ln83_fu_291_p1 = bitcast_ln83_fu_277_p1[51:0];

assign xor_ln54_fu_267_p2 = (bitcast_ln54_fu_225_p1 ^ 64'd9223372036854775808);

endmodule //monte_carlo_both_pri
