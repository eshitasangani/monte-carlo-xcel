// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gaussian_box_muller (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_return
);

parameter    ap_ST_fsm_state1 = 281'd1;
parameter    ap_ST_fsm_state2 = 281'd2;
parameter    ap_ST_fsm_state3 = 281'd4;
parameter    ap_ST_fsm_state4 = 281'd8;
parameter    ap_ST_fsm_state5 = 281'd16;
parameter    ap_ST_fsm_state6 = 281'd32;
parameter    ap_ST_fsm_state7 = 281'd64;
parameter    ap_ST_fsm_state8 = 281'd128;
parameter    ap_ST_fsm_state9 = 281'd256;
parameter    ap_ST_fsm_state10 = 281'd512;
parameter    ap_ST_fsm_state11 = 281'd1024;
parameter    ap_ST_fsm_state12 = 281'd2048;
parameter    ap_ST_fsm_state13 = 281'd4096;
parameter    ap_ST_fsm_state14 = 281'd8192;
parameter    ap_ST_fsm_state15 = 281'd16384;
parameter    ap_ST_fsm_state16 = 281'd32768;
parameter    ap_ST_fsm_state17 = 281'd65536;
parameter    ap_ST_fsm_state18 = 281'd131072;
parameter    ap_ST_fsm_state19 = 281'd262144;
parameter    ap_ST_fsm_state20 = 281'd524288;
parameter    ap_ST_fsm_state21 = 281'd1048576;
parameter    ap_ST_fsm_state22 = 281'd2097152;
parameter    ap_ST_fsm_state23 = 281'd4194304;
parameter    ap_ST_fsm_state24 = 281'd8388608;
parameter    ap_ST_fsm_state25 = 281'd16777216;
parameter    ap_ST_fsm_state26 = 281'd33554432;
parameter    ap_ST_fsm_state27 = 281'd67108864;
parameter    ap_ST_fsm_state28 = 281'd134217728;
parameter    ap_ST_fsm_state29 = 281'd268435456;
parameter    ap_ST_fsm_state30 = 281'd536870912;
parameter    ap_ST_fsm_state31 = 281'd1073741824;
parameter    ap_ST_fsm_state32 = 281'd2147483648;
parameter    ap_ST_fsm_state33 = 281'd4294967296;
parameter    ap_ST_fsm_state34 = 281'd8589934592;
parameter    ap_ST_fsm_state35 = 281'd17179869184;
parameter    ap_ST_fsm_state36 = 281'd34359738368;
parameter    ap_ST_fsm_state37 = 281'd68719476736;
parameter    ap_ST_fsm_state38 = 281'd137438953472;
parameter    ap_ST_fsm_state39 = 281'd274877906944;
parameter    ap_ST_fsm_state40 = 281'd549755813888;
parameter    ap_ST_fsm_state41 = 281'd1099511627776;
parameter    ap_ST_fsm_state42 = 281'd2199023255552;
parameter    ap_ST_fsm_state43 = 281'd4398046511104;
parameter    ap_ST_fsm_state44 = 281'd8796093022208;
parameter    ap_ST_fsm_state45 = 281'd17592186044416;
parameter    ap_ST_fsm_state46 = 281'd35184372088832;
parameter    ap_ST_fsm_state47 = 281'd70368744177664;
parameter    ap_ST_fsm_state48 = 281'd140737488355328;
parameter    ap_ST_fsm_state49 = 281'd281474976710656;
parameter    ap_ST_fsm_state50 = 281'd562949953421312;
parameter    ap_ST_fsm_state51 = 281'd1125899906842624;
parameter    ap_ST_fsm_state52 = 281'd2251799813685248;
parameter    ap_ST_fsm_state53 = 281'd4503599627370496;
parameter    ap_ST_fsm_state54 = 281'd9007199254740992;
parameter    ap_ST_fsm_state55 = 281'd18014398509481984;
parameter    ap_ST_fsm_state56 = 281'd36028797018963968;
parameter    ap_ST_fsm_state57 = 281'd72057594037927936;
parameter    ap_ST_fsm_state58 = 281'd144115188075855872;
parameter    ap_ST_fsm_state59 = 281'd288230376151711744;
parameter    ap_ST_fsm_state60 = 281'd576460752303423488;
parameter    ap_ST_fsm_state61 = 281'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 281'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 281'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 281'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 281'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 281'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 281'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 281'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 281'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 281'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 281'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 281'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 281'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 281'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 281'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 281'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 281'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 281'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 281'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 281'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 281'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 281'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 281'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 281'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 281'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 281'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 281'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 281'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 281'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 281'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 281'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 281'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 281'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 281'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 281'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 281'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 281'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 281'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 281'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 281'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 281'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 281'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 281'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 281'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 281'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 281'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 281'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 281'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 281'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 281'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 281'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 281'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 281'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 281'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 281'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 281'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 281'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 281'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 281'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 281'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 281'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 281'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 281'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 281'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 281'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 281'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 281'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 281'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 281'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 281'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 281'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 281'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 281'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 281'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 281'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 281'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 281'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 281'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 281'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 281'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 281'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 281'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 281'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 281'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 281'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 281'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 281'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 281'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 281'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 281'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 281'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 281'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 281'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state154 = 281'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state155 = 281'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state156 = 281'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state157 = 281'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state158 = 281'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state159 = 281'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state160 = 281'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state161 = 281'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state162 = 281'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state163 = 281'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state164 = 281'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state165 = 281'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state166 = 281'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state167 = 281'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state168 = 281'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state169 = 281'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state170 = 281'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state171 = 281'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state172 = 281'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state173 = 281'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state174 = 281'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state175 = 281'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state176 = 281'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state177 = 281'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state178 = 281'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state179 = 281'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state180 = 281'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state181 = 281'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state182 = 281'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state183 = 281'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state184 = 281'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state185 = 281'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state186 = 281'd49039857307708443467467104868809893875799651909875269632;
parameter    ap_ST_fsm_state187 = 281'd98079714615416886934934209737619787751599303819750539264;
parameter    ap_ST_fsm_state188 = 281'd196159429230833773869868419475239575503198607639501078528;
parameter    ap_ST_fsm_state189 = 281'd392318858461667547739736838950479151006397215279002157056;
parameter    ap_ST_fsm_state190 = 281'd784637716923335095479473677900958302012794430558004314112;
parameter    ap_ST_fsm_state191 = 281'd1569275433846670190958947355801916604025588861116008628224;
parameter    ap_ST_fsm_state192 = 281'd3138550867693340381917894711603833208051177722232017256448;
parameter    ap_ST_fsm_state193 = 281'd6277101735386680763835789423207666416102355444464034512896;
parameter    ap_ST_fsm_state194 = 281'd12554203470773361527671578846415332832204710888928069025792;
parameter    ap_ST_fsm_state195 = 281'd25108406941546723055343157692830665664409421777856138051584;
parameter    ap_ST_fsm_state196 = 281'd50216813883093446110686315385661331328818843555712276103168;
parameter    ap_ST_fsm_state197 = 281'd100433627766186892221372630771322662657637687111424552206336;
parameter    ap_ST_fsm_state198 = 281'd200867255532373784442745261542645325315275374222849104412672;
parameter    ap_ST_fsm_state199 = 281'd401734511064747568885490523085290650630550748445698208825344;
parameter    ap_ST_fsm_state200 = 281'd803469022129495137770981046170581301261101496891396417650688;
parameter    ap_ST_fsm_state201 = 281'd1606938044258990275541962092341162602522202993782792835301376;
parameter    ap_ST_fsm_state202 = 281'd3213876088517980551083924184682325205044405987565585670602752;
parameter    ap_ST_fsm_state203 = 281'd6427752177035961102167848369364650410088811975131171341205504;
parameter    ap_ST_fsm_state204 = 281'd12855504354071922204335696738729300820177623950262342682411008;
parameter    ap_ST_fsm_state205 = 281'd25711008708143844408671393477458601640355247900524685364822016;
parameter    ap_ST_fsm_state206 = 281'd51422017416287688817342786954917203280710495801049370729644032;
parameter    ap_ST_fsm_state207 = 281'd102844034832575377634685573909834406561420991602098741459288064;
parameter    ap_ST_fsm_state208 = 281'd205688069665150755269371147819668813122841983204197482918576128;
parameter    ap_ST_fsm_state209 = 281'd411376139330301510538742295639337626245683966408394965837152256;
parameter    ap_ST_fsm_state210 = 281'd822752278660603021077484591278675252491367932816789931674304512;
parameter    ap_ST_fsm_state211 = 281'd1645504557321206042154969182557350504982735865633579863348609024;
parameter    ap_ST_fsm_state212 = 281'd3291009114642412084309938365114701009965471731267159726697218048;
parameter    ap_ST_fsm_state213 = 281'd6582018229284824168619876730229402019930943462534319453394436096;
parameter    ap_ST_fsm_state214 = 281'd13164036458569648337239753460458804039861886925068638906788872192;
parameter    ap_ST_fsm_state215 = 281'd26328072917139296674479506920917608079723773850137277813577744384;
parameter    ap_ST_fsm_state216 = 281'd52656145834278593348959013841835216159447547700274555627155488768;
parameter    ap_ST_fsm_state217 = 281'd105312291668557186697918027683670432318895095400549111254310977536;
parameter    ap_ST_fsm_state218 = 281'd210624583337114373395836055367340864637790190801098222508621955072;
parameter    ap_ST_fsm_state219 = 281'd421249166674228746791672110734681729275580381602196445017243910144;
parameter    ap_ST_fsm_state220 = 281'd842498333348457493583344221469363458551160763204392890034487820288;
parameter    ap_ST_fsm_state221 = 281'd1684996666696914987166688442938726917102321526408785780068975640576;
parameter    ap_ST_fsm_state222 = 281'd3369993333393829974333376885877453834204643052817571560137951281152;
parameter    ap_ST_fsm_state223 = 281'd6739986666787659948666753771754907668409286105635143120275902562304;
parameter    ap_ST_fsm_state224 = 281'd13479973333575319897333507543509815336818572211270286240551805124608;
parameter    ap_ST_fsm_state225 = 281'd26959946667150639794667015087019630673637144422540572481103610249216;
parameter    ap_ST_fsm_state226 = 281'd53919893334301279589334030174039261347274288845081144962207220498432;
parameter    ap_ST_fsm_state227 = 281'd107839786668602559178668060348078522694548577690162289924414440996864;
parameter    ap_ST_fsm_state228 = 281'd215679573337205118357336120696157045389097155380324579848828881993728;
parameter    ap_ST_fsm_state229 = 281'd431359146674410236714672241392314090778194310760649159697657763987456;
parameter    ap_ST_fsm_state230 = 281'd862718293348820473429344482784628181556388621521298319395315527974912;
parameter    ap_ST_fsm_state231 = 281'd1725436586697640946858688965569256363112777243042596638790631055949824;
parameter    ap_ST_fsm_state232 = 281'd3450873173395281893717377931138512726225554486085193277581262111899648;
parameter    ap_ST_fsm_state233 = 281'd6901746346790563787434755862277025452451108972170386555162524223799296;
parameter    ap_ST_fsm_state234 = 281'd13803492693581127574869511724554050904902217944340773110325048447598592;
parameter    ap_ST_fsm_state235 = 281'd27606985387162255149739023449108101809804435888681546220650096895197184;
parameter    ap_ST_fsm_state236 = 281'd55213970774324510299478046898216203619608871777363092441300193790394368;
parameter    ap_ST_fsm_state237 = 281'd110427941548649020598956093796432407239217743554726184882600387580788736;
parameter    ap_ST_fsm_state238 = 281'd220855883097298041197912187592864814478435487109452369765200775161577472;
parameter    ap_ST_fsm_state239 = 281'd441711766194596082395824375185729628956870974218904739530401550323154944;
parameter    ap_ST_fsm_state240 = 281'd883423532389192164791648750371459257913741948437809479060803100646309888;
parameter    ap_ST_fsm_state241 = 281'd1766847064778384329583297500742918515827483896875618958121606201292619776;
parameter    ap_ST_fsm_state242 = 281'd3533694129556768659166595001485837031654967793751237916243212402585239552;
parameter    ap_ST_fsm_state243 = 281'd7067388259113537318333190002971674063309935587502475832486424805170479104;
parameter    ap_ST_fsm_state244 = 281'd14134776518227074636666380005943348126619871175004951664972849610340958208;
parameter    ap_ST_fsm_state245 = 281'd28269553036454149273332760011886696253239742350009903329945699220681916416;
parameter    ap_ST_fsm_state246 = 281'd56539106072908298546665520023773392506479484700019806659891398441363832832;
parameter    ap_ST_fsm_state247 = 281'd113078212145816597093331040047546785012958969400039613319782796882727665664;
parameter    ap_ST_fsm_state248 = 281'd226156424291633194186662080095093570025917938800079226639565593765455331328;
parameter    ap_ST_fsm_state249 = 281'd452312848583266388373324160190187140051835877600158453279131187530910662656;
parameter    ap_ST_fsm_state250 = 281'd904625697166532776746648320380374280103671755200316906558262375061821325312;
parameter    ap_ST_fsm_state251 = 281'd1809251394333065553493296640760748560207343510400633813116524750123642650624;
parameter    ap_ST_fsm_state252 = 281'd3618502788666131106986593281521497120414687020801267626233049500247285301248;
parameter    ap_ST_fsm_state253 = 281'd7237005577332262213973186563042994240829374041602535252466099000494570602496;
parameter    ap_ST_fsm_state254 = 281'd14474011154664524427946373126085988481658748083205070504932198000989141204992;
parameter    ap_ST_fsm_state255 = 281'd28948022309329048855892746252171976963317496166410141009864396001978282409984;
parameter    ap_ST_fsm_state256 = 281'd57896044618658097711785492504343953926634992332820282019728792003956564819968;
parameter    ap_ST_fsm_state257 = 281'd115792089237316195423570985008687907853269984665640564039457584007913129639936;
parameter    ap_ST_fsm_state258 = 281'd231584178474632390847141970017375815706539969331281128078915168015826259279872;
parameter    ap_ST_fsm_state259 = 281'd463168356949264781694283940034751631413079938662562256157830336031652518559744;
parameter    ap_ST_fsm_state260 = 281'd926336713898529563388567880069503262826159877325124512315660672063305037119488;
parameter    ap_ST_fsm_state261 = 281'd1852673427797059126777135760139006525652319754650249024631321344126610074238976;
parameter    ap_ST_fsm_state262 = 281'd3705346855594118253554271520278013051304639509300498049262642688253220148477952;
parameter    ap_ST_fsm_state263 = 281'd7410693711188236507108543040556026102609279018600996098525285376506440296955904;
parameter    ap_ST_fsm_state264 = 281'd14821387422376473014217086081112052205218558037201992197050570753012880593911808;
parameter    ap_ST_fsm_state265 = 281'd29642774844752946028434172162224104410437116074403984394101141506025761187823616;
parameter    ap_ST_fsm_state266 = 281'd59285549689505892056868344324448208820874232148807968788202283012051522375647232;
parameter    ap_ST_fsm_state267 = 281'd118571099379011784113736688648896417641748464297615937576404566024103044751294464;
parameter    ap_ST_fsm_state268 = 281'd237142198758023568227473377297792835283496928595231875152809132048206089502588928;
parameter    ap_ST_fsm_state269 = 281'd474284397516047136454946754595585670566993857190463750305618264096412179005177856;
parameter    ap_ST_fsm_state270 = 281'd948568795032094272909893509191171341133987714380927500611236528192824358010355712;
parameter    ap_ST_fsm_state271 = 281'd1897137590064188545819787018382342682267975428761855001222473056385648716020711424;
parameter    ap_ST_fsm_state272 = 281'd3794275180128377091639574036764685364535950857523710002444946112771297432041422848;
parameter    ap_ST_fsm_state273 = 281'd7588550360256754183279148073529370729071901715047420004889892225542594864082845696;
parameter    ap_ST_fsm_state274 = 281'd15177100720513508366558296147058741458143803430094840009779784451085189728165691392;
parameter    ap_ST_fsm_state275 = 281'd30354201441027016733116592294117482916287606860189680019559568902170379456331382784;
parameter    ap_ST_fsm_state276 = 281'd60708402882054033466233184588234965832575213720379360039119137804340758912662765568;
parameter    ap_ST_fsm_state277 = 281'd121416805764108066932466369176469931665150427440758720078238275608681517825325531136;
parameter    ap_ST_fsm_state278 = 281'd242833611528216133864932738352939863330300854881517440156476551217363035650651062272;
parameter    ap_ST_fsm_state279 = 281'd485667223056432267729865476705879726660601709763034880312953102434726071301302124544;
parameter    ap_ST_fsm_state280 = 281'd971334446112864535459730953411759453321203419526069760625906204869452142602604249088;
parameter    ap_ST_fsm_state281 = 281'd1942668892225729070919461906823518906642406839052139521251812409738904285205208498176;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[63:0] ap_return;

(* fsm_encoding = "none" *) reg   [280:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] seed;
wire   [63:0] grp_fu_207_p2;
reg   [63:0] reg_253;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state108;
wire    ap_CS_fsm_state149;
wire    ap_CS_fsm_state155;
wire    ap_CS_fsm_state231;
wire   [63:0] grp_fu_212_p2;
reg   [63:0] reg_266;
wire   [63:0] grp_fu_224_p2;
reg   [63:0] reg_272;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state187;
wire   [63:0] grp_fu_190_p2;
reg   [63:0] reg_285;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state113;
wire    ap_CS_fsm_state224;
wire   [63:0] grp_fu_195_p2;
reg   [63:0] reg_294;
reg   [63:0] reg_301;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state144;
wire    ap_CS_fsm_state236;
reg   [63:0] reg_309;
wire    ap_CS_fsm_state139;
wire    ap_CS_fsm_state219;
wire    ap_CS_fsm_state270;
wire   [3:0] i_fu_321_p2;
reg   [3:0] i_reg_597;
wire    ap_CS_fsm_state2;
wire   [31:0] mul_ln39_fu_331_p2;
reg   [31:0] mul_ln39_reg_602;
wire   [0:0] icmp_ln152_fu_315_p2;
wire  signed [31:0] add_ln39_fu_337_p2;
reg  signed [31:0] add_ln39_reg_607;
wire    ap_CS_fsm_state3;
wire   [31:0] mul_ln39_1_fu_342_p2;
reg   [31:0] mul_ln39_1_reg_613;
wire    ap_CS_fsm_state4;
wire   [31:0] add_ln39_1_fu_347_p2;
reg   [31:0] add_ln39_1_reg_618;
wire    ap_CS_fsm_state5;
wire   [63:0] grp_fu_247_p1;
reg   [63:0] casted_seed_reg_623;
wire    ap_CS_fsm_state11;
wire   [63:0] grp_fu_250_p1;
reg   [63:0] casted_seed_1_reg_628;
wire   [63:0] grp_fu_229_p2;
reg   [63:0] tmp_i6_reg_633;
wire   [0:0] icmp_ln156_fu_376_p2;
reg   [0:0] icmp_ln156_reg_638;
wire    ap_CS_fsm_state65;
wire   [0:0] icmp_ln156_1_fu_382_p2;
reg   [0:0] icmp_ln156_1_reg_643;
wire   [63:0] x_1_fu_398_p3;
wire    ap_CS_fsm_state66;
wire   [3:0] i_1_fu_454_p2;
reg   [3:0] i_1_reg_659;
wire    ap_CS_fsm_state109;
wire   [0:0] icmp_ln108_fu_448_p2;
reg   [63:0] numerator_1_reg_664;
wire    ap_CS_fsm_state114;
wire   [63:0] bitcast_ln54_2_fu_550_p1;
wire    ap_CS_fsm_state238;
wire   [0:0] and_ln54_fu_538_p2;
wire   [0:0] icmp_ln83_fu_572_p2;
reg   [0:0] icmp_ln83_reg_680;
wire    ap_CS_fsm_state239;
wire   [0:0] icmp_ln83_2_fu_578_p2;
reg   [0:0] icmp_ln83_2_reg_685;
wire    ap_CS_fsm_state275;
reg   [3:0] i_0_reg_56;
reg   [63:0] x_assign_reg_67;
reg   [63:0] x_0_reg_79;
reg   [63:0] numerator_0_i_reg_91;
reg   [63:0] result_0_i_reg_101;
reg   [63:0] denominator_0_i_reg_113;
reg   [3:0] i_0_i_reg_125;
reg   [63:0] phi_ln171_reg_136;
wire    ap_CS_fsm_state156;
wire    ap_CS_fsm_state67;
wire   [0:0] and_ln94_fu_442_p2;
reg   [63:0] nextGuess_0_in_i_reg_148;
wire    ap_CS_fsm_state225;
reg   [63:0] guess_0_i_reg_158;
reg   [63:0] phi_ln54_reg_168;
reg   [63:0] p_0_i12_reg_178;
wire    ap_CS_fsm_state189;
wire   [0:0] and_ln58_fu_496_p2;
wire    ap_CS_fsm_state240;
wire   [0:0] and_ln83_fu_588_p2;
reg   [63:0] grp_fu_190_p0;
reg   [63:0] grp_fu_190_p1;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state140;
wire    ap_CS_fsm_state220;
wire    ap_CS_fsm_state232;
wire    ap_CS_fsm_state271;
reg   [63:0] grp_fu_195_p0;
reg   [63:0] grp_fu_195_p1;
reg   [63:0] grp_fu_207_p0;
reg   [63:0] grp_fu_207_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_state150;
wire    ap_CS_fsm_state226;
wire    ap_CS_fsm_state276;
reg   [63:0] grp_fu_212_p0;
reg   [63:0] grp_fu_212_p1;
reg   [63:0] grp_fu_224_p0;
reg   [63:0] grp_fu_224_p1;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state157;
reg   [63:0] grp_fu_238_p0;
reg   [63:0] grp_fu_238_p1;
wire    ap_CS_fsm_state188;
wire    ap_CS_fsm_state237;
wire    ap_CS_fsm_state6;
wire  signed [31:0] mul_ln39_fu_331_p1;
wire   [63:0] bitcast_ln156_fu_358_p1;
wire   [10:0] tmp_12_fu_362_p4;
wire   [51:0] trunc_ln156_fu_372_p1;
wire   [0:0] or_ln156_fu_388_p2;
wire   [0:0] grp_fu_238_p2;
wire   [0:0] and_ln156_fu_392_p2;
wire   [63:0] bitcast_ln94_fu_406_p1;
wire   [10:0] tmp_fu_410_p4;
wire   [51:0] trunc_ln94_fu_420_p1;
wire   [0:0] icmp_ln94_1_fu_430_p2;
wire   [0:0] icmp_ln94_fu_424_p2;
wire   [0:0] or_ln94_fu_436_p2;
wire   [63:0] bitcast_ln58_fu_460_p1;
wire   [10:0] tmp_14_fu_464_p4;
wire   [51:0] trunc_ln58_fu_474_p1;
wire   [0:0] icmp_ln58_1_fu_484_p2;
wire   [0:0] icmp_ln58_fu_478_p2;
wire   [0:0] or_ln58_fu_490_p2;
wire   [63:0] bitcast_ln54_fu_502_p1;
wire   [10:0] tmp_16_fu_506_p4;
wire   [51:0] trunc_ln54_fu_516_p1;
wire   [0:0] icmp_ln54_2_fu_526_p2;
wire   [0:0] icmp_ln54_fu_520_p2;
wire   [0:0] or_ln54_fu_532_p2;
wire   [63:0] xor_ln54_fu_544_p2;
wire   [63:0] bitcast_ln83_fu_554_p1;
wire   [10:0] tmp_18_fu_558_p4;
wire   [51:0] trunc_ln83_fu_568_p1;
wire   [0:0] or_ln83_fu_584_p2;
reg   [1:0] grp_fu_190_opcode;
reg   [4:0] grp_fu_238_opcode;
reg   [63:0] ap_return_preg;
wire    ap_CS_fsm_state281;
reg   [280:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 281'd1;
#0 seed = 32'd1;
#0 ap_return_preg = 64'd0;
end

dut_dadddsub_64nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dut_dadddsub_64nsbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_190_p0),
    .din1(grp_fu_190_p1),
    .opcode(grp_fu_190_opcode),
    .ce(1'b1),
    .dout(grp_fu_190_p2)
);

dut_dadd_64ns_64ncud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dut_dadd_64ns_64ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_195_p0),
    .din1(grp_fu_195_p1),
    .ce(1'b1),
    .dout(grp_fu_195_p2)
);

dut_dmul_64ns_64ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dut_dmul_64ns_64ndEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_207_p0),
    .din1(grp_fu_207_p1),
    .ce(1'b1),
    .dout(grp_fu_207_p2)
);

dut_dmul_64ns_64ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dut_dmul_64ns_64ndEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_212_p0),
    .din1(grp_fu_212_p1),
    .ce(1'b1),
    .dout(grp_fu_212_p2)
);

dut_ddiv_64ns_64neOg #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dut_ddiv_64ns_64neOg_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_224_p0),
    .din1(grp_fu_224_p1),
    .ce(1'b1),
    .dout(grp_fu_224_p2)
);

dut_ddiv_64ns_64neOg #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dut_ddiv_64ns_64neOg_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_266),
    .din1(64'd4746794007244308480),
    .ce(1'b1),
    .dout(grp_fu_229_p2)
);

dut_dcmp_64ns_64nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dut_dcmp_64ns_64nfYi_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_238_p0),
    .din1(grp_fu_238_p1),
    .ce(1'b1),
    .opcode(grp_fu_238_opcode),
    .dout(grp_fu_238_p2)
);

dut_sitodp_32s_64g8j #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
dut_sitodp_32s_64g8j_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln39_reg_607),
    .ce(1'b1),
    .dout(grp_fu_247_p1)
);

dut_sitodp_32ns_6hbi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
dut_sitodp_32ns_6hbi_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln39_1_reg_618),
    .ce(1'b1),
    .dout(grp_fu_250_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state281)) begin
            ap_return_preg <= grp_fu_207_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state144)) begin
        denominator_0_i_reg_113 <= reg_285;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        denominator_0_i_reg_113 <= 64'd4607182418800017408;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state275)) begin
        guess_0_i_reg_158 <= reg_253;
    end else if ((1'b1 == ap_CS_fsm_state225)) begin
        guess_0_i_reg_158 <= reg_272;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state144)) begin
        i_0_i_reg_125 <= i_1_reg_659;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        i_0_i_reg_125 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        i_0_reg_56 <= i_reg_597;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_56 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state275)) begin
        nextGuess_0_in_i_reg_148 <= grp_fu_190_p2;
    end else if ((1'b1 == ap_CS_fsm_state225)) begin
        nextGuess_0_in_i_reg_148 <= reg_285;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state144)) begin
        numerator_0_i_reg_91 <= numerator_1_reg_664;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        numerator_0_i_reg_91 <= reg_272;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln83_fu_588_p2) & (1'b1 == ap_CS_fsm_state240))) begin
        p_0_i12_reg_178 <= reg_253;
    end else if (((1'd1 == and_ln58_fu_496_p2) & (1'b1 == ap_CS_fsm_state189))) begin
        p_0_i12_reg_178 <= 64'd13830554455654793216;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln94_fu_442_p2) & (1'b1 == ap_CS_fsm_state67))) begin
        phi_ln171_reg_136 <= 64'd4611686018427387904;
    end else if ((1'b1 == ap_CS_fsm_state156)) begin
        phi_ln171_reg_136 <= reg_253;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state238)) begin
        if ((1'd0 == and_ln54_fu_538_p2)) begin
            phi_ln54_reg_168 <= reg_301;
        end else if ((1'd1 == and_ln54_fu_538_p2)) begin
            phi_ln54_reg_168 <= bitcast_ln54_2_fu_550_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state144)) begin
        result_0_i_reg_101 <= grp_fu_190_p2;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        result_0_i_reg_101 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        x_0_reg_79 <= x_1_fu_398_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_0_reg_79 <= 64'd4601875917431079300;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        x_assign_reg_67 <= reg_301;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_assign_reg_67 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln39_1_reg_618 <= add_ln39_1_fu_347_p2;
        seed <= add_ln39_1_fu_347_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln39_reg_607 <= add_ln39_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        casted_seed_1_reg_628 <= grp_fu_250_p1;
        casted_seed_reg_623 <= grp_fu_247_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln108_fu_448_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state109))) begin
        i_1_reg_659 <= i_1_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_597 <= i_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        icmp_ln156_1_reg_643 <= icmp_ln156_1_fu_382_p2;
        icmp_ln156_reg_638 <= icmp_ln156_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state239)) begin
        icmp_ln83_2_reg_685 <= icmp_ln83_2_fu_578_p2;
        icmp_ln83_reg_680 <= icmp_ln83_fu_572_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln39_1_reg_613 <= mul_ln39_1_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln152_fu_315_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mul_ln39_reg_602 <= mul_ln39_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state114)) begin
        numerator_1_reg_664 <= grp_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state231) | (1'b1 == ap_CS_fsm_state155) | (1'b1 == ap_CS_fsm_state149) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_253 <= grp_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_266 <= grp_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state187) | (1'b1 == ap_CS_fsm_state102) | (1'b1 == ap_CS_fsm_state48))) begin
        reg_272 <= grp_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state224) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state53))) begin
        reg_285 <= grp_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state53))) begin
        reg_294 <= grp_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state236) | (1'b1 == ap_CS_fsm_state144) | (1'b1 == ap_CS_fsm_state64))) begin
        reg_301 <= grp_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state270) | (1'b1 == ap_CS_fsm_state219) | (1'b1 == ap_CS_fsm_state139))) begin
        reg_309 <= grp_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        tmp_i6_reg_633 <= grp_fu_229_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state281) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state281)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state281)) begin
        ap_return = grp_fu_207_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state232)) begin
        grp_fu_190_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state271) | (1'b1 == ap_CS_fsm_state220) | (1'b1 == ap_CS_fsm_state140) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state49) | ((1'd0 == and_ln94_fu_442_p2) & (1'b1 == ap_CS_fsm_state67)) | ((icmp_ln108_fu_448_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state109)))) begin
        grp_fu_190_opcode = 2'd0;
    end else begin
        grp_fu_190_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state232)) begin
        grp_fu_190_p0 = guess_0_i_reg_158;
    end else if ((1'b1 == ap_CS_fsm_state220)) begin
        grp_fu_190_p0 = reg_309;
    end else if ((1'b1 == ap_CS_fsm_state140)) begin
        grp_fu_190_p0 = result_0_i_reg_101;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        grp_fu_190_p0 = denominator_0_i_reg_113;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        grp_fu_190_p0 = x_assign_reg_67;
    end else if (((1'b1 == ap_CS_fsm_state271) | (1'b1 == ap_CS_fsm_state60))) begin
        grp_fu_190_p0 = reg_253;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_190_p0 = reg_272;
    end else begin
        grp_fu_190_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state232)) begin
        grp_fu_190_p1 = reg_253;
    end else if ((1'b1 == ap_CS_fsm_state220)) begin
        grp_fu_190_p1 = reg_272;
    end else if (((1'b1 == ap_CS_fsm_state271) | (1'b1 == ap_CS_fsm_state140))) begin
        grp_fu_190_p1 = reg_309;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        grp_fu_190_p1 = 64'd4611686018427387904;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_190_p1 = reg_266;
    end else if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state67))) begin
        grp_fu_190_p1 = 64'd13830554455654793216;
    end else begin
        grp_fu_190_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        grp_fu_195_p0 = x_assign_reg_67;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_195_p0 = tmp_i6_reg_633;
    end else begin
        grp_fu_195_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        grp_fu_195_p1 = 64'd4607182418800017408;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        grp_fu_195_p1 = 64'd13830554455654793216;
    end else begin
        grp_fu_195_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state276)) begin
        grp_fu_207_p0 = x_0_reg_79;
    end else if ((1'b1 == ap_CS_fsm_state226)) begin
        grp_fu_207_p0 = nextGuess_0_in_i_reg_148;
    end else if ((1'b1 == ap_CS_fsm_state150)) begin
        grp_fu_207_p0 = reg_253;
    end else if (((icmp_ln108_fu_448_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state109))) begin
        grp_fu_207_p0 = result_0_i_reg_101;
    end else if (((icmp_ln108_fu_448_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state109))) begin
        grp_fu_207_p0 = numerator_0_i_reg_91;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        grp_fu_207_p0 = reg_272;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_207_p0 = reg_285;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_207_p0 = casted_seed_reg_623;
    end else begin
        grp_fu_207_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state276)) begin
        grp_fu_207_p1 = p_0_i12_reg_178;
    end else if ((1'b1 == ap_CS_fsm_state226)) begin
        grp_fu_207_p1 = 64'd4602678819172646912;
    end else if ((1'b1 == ap_CS_fsm_state150)) begin
        grp_fu_207_p1 = 64'd13835058055282163712;
    end else if (((icmp_ln108_fu_448_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state109))) begin
        grp_fu_207_p1 = reg_253;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        grp_fu_207_p1 = reg_272;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_207_p1 = reg_285;
    end else if (((1'b1 == ap_CS_fsm_state12) | ((icmp_ln108_fu_448_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state109)))) begin
        grp_fu_207_p1 = 64'd4611686018427387904;
    end else begin
        grp_fu_207_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_212_p0 = reg_294;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_212_p0 = casted_seed_1_reg_628;
    end else begin
        grp_fu_212_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_212_p1 = reg_294;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_212_p1 = 64'd4611686018427387904;
    end else begin
        grp_fu_212_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state240) | (1'b1 == ap_CS_fsm_state189))) begin
        grp_fu_224_p0 = reg_272;
    end else if ((1'b1 == ap_CS_fsm_state157)) begin
        grp_fu_224_p0 = phi_ln171_reg_136;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        grp_fu_224_p0 = numerator_0_i_reg_91;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        grp_fu_224_p0 = reg_285;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_224_p0 = reg_253;
    end else begin
        grp_fu_224_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state240)) begin
        grp_fu_224_p1 = reg_253;
    end else if ((1'b1 == ap_CS_fsm_state189)) begin
        grp_fu_224_p1 = reg_272;
    end else if ((1'b1 == ap_CS_fsm_state157)) begin
        grp_fu_224_p1 = x_assign_reg_67;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        grp_fu_224_p1 = denominator_0_i_reg_113;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        grp_fu_224_p1 = reg_294;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_224_p1 = 64'd4746794007244308480;
    end else begin
        grp_fu_224_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state239)) begin
        grp_fu_238_opcode = 5'd3;
    end else if (((1'b1 == ap_CS_fsm_state237) | (1'b1 == ap_CS_fsm_state188) | (1'b1 == ap_CS_fsm_state65))) begin
        grp_fu_238_opcode = 5'd4;
    end else if (((icmp_ln152_fu_315_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_238_opcode = 5'd5;
    end else begin
        grp_fu_238_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state239)) begin
        grp_fu_238_p0 = phi_ln54_reg_168;
    end else if ((1'b1 == ap_CS_fsm_state188)) begin
        grp_fu_238_p0 = reg_272;
    end else if (((1'b1 == ap_CS_fsm_state237) | (1'b1 == ap_CS_fsm_state65))) begin
        grp_fu_238_p0 = reg_301;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_238_p0 = x_assign_reg_67;
    end else begin
        grp_fu_238_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state239)) begin
        grp_fu_238_p1 = 64'd4532020583610935537;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        grp_fu_238_p1 = 64'd4607182418800017408;
    end else if (((1'b1 == ap_CS_fsm_state237) | (1'b1 == ap_CS_fsm_state188) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_fu_238_p1 = 64'd0;
    end else begin
        grp_fu_238_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln152_fu_315_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state67 : begin
            if (((1'd1 == and_ln94_fu_442_p2) & (1'b1 == ap_CS_fsm_state67))) begin
                ap_NS_fsm = ap_ST_fsm_state157;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            if (((icmp_ln108_fu_448_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state109))) begin
                ap_NS_fsm = ap_ST_fsm_state145;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state110;
            end
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state169;
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state177;
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state181;
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state183 : begin
            ap_NS_fsm = ap_ST_fsm_state184;
        end
        ap_ST_fsm_state184 : begin
            ap_NS_fsm = ap_ST_fsm_state185;
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            if (((1'd1 == and_ln58_fu_496_p2) & (1'b1 == ap_CS_fsm_state189))) begin
                ap_NS_fsm = ap_ST_fsm_state276;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state190;
            end
        end
        ap_ST_fsm_state190 : begin
            ap_NS_fsm = ap_ST_fsm_state191;
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            ap_NS_fsm = ap_ST_fsm_state193;
        end
        ap_ST_fsm_state193 : begin
            ap_NS_fsm = ap_ST_fsm_state194;
        end
        ap_ST_fsm_state194 : begin
            ap_NS_fsm = ap_ST_fsm_state195;
        end
        ap_ST_fsm_state195 : begin
            ap_NS_fsm = ap_ST_fsm_state196;
        end
        ap_ST_fsm_state196 : begin
            ap_NS_fsm = ap_ST_fsm_state197;
        end
        ap_ST_fsm_state197 : begin
            ap_NS_fsm = ap_ST_fsm_state198;
        end
        ap_ST_fsm_state198 : begin
            ap_NS_fsm = ap_ST_fsm_state199;
        end
        ap_ST_fsm_state199 : begin
            ap_NS_fsm = ap_ST_fsm_state200;
        end
        ap_ST_fsm_state200 : begin
            ap_NS_fsm = ap_ST_fsm_state201;
        end
        ap_ST_fsm_state201 : begin
            ap_NS_fsm = ap_ST_fsm_state202;
        end
        ap_ST_fsm_state202 : begin
            ap_NS_fsm = ap_ST_fsm_state203;
        end
        ap_ST_fsm_state203 : begin
            ap_NS_fsm = ap_ST_fsm_state204;
        end
        ap_ST_fsm_state204 : begin
            ap_NS_fsm = ap_ST_fsm_state205;
        end
        ap_ST_fsm_state205 : begin
            ap_NS_fsm = ap_ST_fsm_state206;
        end
        ap_ST_fsm_state206 : begin
            ap_NS_fsm = ap_ST_fsm_state207;
        end
        ap_ST_fsm_state207 : begin
            ap_NS_fsm = ap_ST_fsm_state208;
        end
        ap_ST_fsm_state208 : begin
            ap_NS_fsm = ap_ST_fsm_state209;
        end
        ap_ST_fsm_state209 : begin
            ap_NS_fsm = ap_ST_fsm_state210;
        end
        ap_ST_fsm_state210 : begin
            ap_NS_fsm = ap_ST_fsm_state211;
        end
        ap_ST_fsm_state211 : begin
            ap_NS_fsm = ap_ST_fsm_state212;
        end
        ap_ST_fsm_state212 : begin
            ap_NS_fsm = ap_ST_fsm_state213;
        end
        ap_ST_fsm_state213 : begin
            ap_NS_fsm = ap_ST_fsm_state214;
        end
        ap_ST_fsm_state214 : begin
            ap_NS_fsm = ap_ST_fsm_state215;
        end
        ap_ST_fsm_state215 : begin
            ap_NS_fsm = ap_ST_fsm_state216;
        end
        ap_ST_fsm_state216 : begin
            ap_NS_fsm = ap_ST_fsm_state217;
        end
        ap_ST_fsm_state217 : begin
            ap_NS_fsm = ap_ST_fsm_state218;
        end
        ap_ST_fsm_state218 : begin
            ap_NS_fsm = ap_ST_fsm_state219;
        end
        ap_ST_fsm_state219 : begin
            ap_NS_fsm = ap_ST_fsm_state220;
        end
        ap_ST_fsm_state220 : begin
            ap_NS_fsm = ap_ST_fsm_state221;
        end
        ap_ST_fsm_state221 : begin
            ap_NS_fsm = ap_ST_fsm_state222;
        end
        ap_ST_fsm_state222 : begin
            ap_NS_fsm = ap_ST_fsm_state223;
        end
        ap_ST_fsm_state223 : begin
            ap_NS_fsm = ap_ST_fsm_state224;
        end
        ap_ST_fsm_state224 : begin
            ap_NS_fsm = ap_ST_fsm_state225;
        end
        ap_ST_fsm_state225 : begin
            ap_NS_fsm = ap_ST_fsm_state226;
        end
        ap_ST_fsm_state226 : begin
            ap_NS_fsm = ap_ST_fsm_state227;
        end
        ap_ST_fsm_state227 : begin
            ap_NS_fsm = ap_ST_fsm_state228;
        end
        ap_ST_fsm_state228 : begin
            ap_NS_fsm = ap_ST_fsm_state229;
        end
        ap_ST_fsm_state229 : begin
            ap_NS_fsm = ap_ST_fsm_state230;
        end
        ap_ST_fsm_state230 : begin
            ap_NS_fsm = ap_ST_fsm_state231;
        end
        ap_ST_fsm_state231 : begin
            ap_NS_fsm = ap_ST_fsm_state232;
        end
        ap_ST_fsm_state232 : begin
            ap_NS_fsm = ap_ST_fsm_state233;
        end
        ap_ST_fsm_state233 : begin
            ap_NS_fsm = ap_ST_fsm_state234;
        end
        ap_ST_fsm_state234 : begin
            ap_NS_fsm = ap_ST_fsm_state235;
        end
        ap_ST_fsm_state235 : begin
            ap_NS_fsm = ap_ST_fsm_state236;
        end
        ap_ST_fsm_state236 : begin
            ap_NS_fsm = ap_ST_fsm_state237;
        end
        ap_ST_fsm_state237 : begin
            ap_NS_fsm = ap_ST_fsm_state238;
        end
        ap_ST_fsm_state238 : begin
            ap_NS_fsm = ap_ST_fsm_state239;
        end
        ap_ST_fsm_state239 : begin
            ap_NS_fsm = ap_ST_fsm_state240;
        end
        ap_ST_fsm_state240 : begin
            if (((1'd0 == and_ln83_fu_588_p2) & (1'b1 == ap_CS_fsm_state240))) begin
                ap_NS_fsm = ap_ST_fsm_state276;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state241;
            end
        end
        ap_ST_fsm_state241 : begin
            ap_NS_fsm = ap_ST_fsm_state242;
        end
        ap_ST_fsm_state242 : begin
            ap_NS_fsm = ap_ST_fsm_state243;
        end
        ap_ST_fsm_state243 : begin
            ap_NS_fsm = ap_ST_fsm_state244;
        end
        ap_ST_fsm_state244 : begin
            ap_NS_fsm = ap_ST_fsm_state245;
        end
        ap_ST_fsm_state245 : begin
            ap_NS_fsm = ap_ST_fsm_state246;
        end
        ap_ST_fsm_state246 : begin
            ap_NS_fsm = ap_ST_fsm_state247;
        end
        ap_ST_fsm_state247 : begin
            ap_NS_fsm = ap_ST_fsm_state248;
        end
        ap_ST_fsm_state248 : begin
            ap_NS_fsm = ap_ST_fsm_state249;
        end
        ap_ST_fsm_state249 : begin
            ap_NS_fsm = ap_ST_fsm_state250;
        end
        ap_ST_fsm_state250 : begin
            ap_NS_fsm = ap_ST_fsm_state251;
        end
        ap_ST_fsm_state251 : begin
            ap_NS_fsm = ap_ST_fsm_state252;
        end
        ap_ST_fsm_state252 : begin
            ap_NS_fsm = ap_ST_fsm_state253;
        end
        ap_ST_fsm_state253 : begin
            ap_NS_fsm = ap_ST_fsm_state254;
        end
        ap_ST_fsm_state254 : begin
            ap_NS_fsm = ap_ST_fsm_state255;
        end
        ap_ST_fsm_state255 : begin
            ap_NS_fsm = ap_ST_fsm_state256;
        end
        ap_ST_fsm_state256 : begin
            ap_NS_fsm = ap_ST_fsm_state257;
        end
        ap_ST_fsm_state257 : begin
            ap_NS_fsm = ap_ST_fsm_state258;
        end
        ap_ST_fsm_state258 : begin
            ap_NS_fsm = ap_ST_fsm_state259;
        end
        ap_ST_fsm_state259 : begin
            ap_NS_fsm = ap_ST_fsm_state260;
        end
        ap_ST_fsm_state260 : begin
            ap_NS_fsm = ap_ST_fsm_state261;
        end
        ap_ST_fsm_state261 : begin
            ap_NS_fsm = ap_ST_fsm_state262;
        end
        ap_ST_fsm_state262 : begin
            ap_NS_fsm = ap_ST_fsm_state263;
        end
        ap_ST_fsm_state263 : begin
            ap_NS_fsm = ap_ST_fsm_state264;
        end
        ap_ST_fsm_state264 : begin
            ap_NS_fsm = ap_ST_fsm_state265;
        end
        ap_ST_fsm_state265 : begin
            ap_NS_fsm = ap_ST_fsm_state266;
        end
        ap_ST_fsm_state266 : begin
            ap_NS_fsm = ap_ST_fsm_state267;
        end
        ap_ST_fsm_state267 : begin
            ap_NS_fsm = ap_ST_fsm_state268;
        end
        ap_ST_fsm_state268 : begin
            ap_NS_fsm = ap_ST_fsm_state269;
        end
        ap_ST_fsm_state269 : begin
            ap_NS_fsm = ap_ST_fsm_state270;
        end
        ap_ST_fsm_state270 : begin
            ap_NS_fsm = ap_ST_fsm_state271;
        end
        ap_ST_fsm_state271 : begin
            ap_NS_fsm = ap_ST_fsm_state272;
        end
        ap_ST_fsm_state272 : begin
            ap_NS_fsm = ap_ST_fsm_state273;
        end
        ap_ST_fsm_state273 : begin
            ap_NS_fsm = ap_ST_fsm_state274;
        end
        ap_ST_fsm_state274 : begin
            ap_NS_fsm = ap_ST_fsm_state275;
        end
        ap_ST_fsm_state275 : begin
            ap_NS_fsm = ap_ST_fsm_state226;
        end
        ap_ST_fsm_state276 : begin
            ap_NS_fsm = ap_ST_fsm_state277;
        end
        ap_ST_fsm_state277 : begin
            ap_NS_fsm = ap_ST_fsm_state278;
        end
        ap_ST_fsm_state278 : begin
            ap_NS_fsm = ap_ST_fsm_state279;
        end
        ap_ST_fsm_state279 : begin
            ap_NS_fsm = ap_ST_fsm_state280;
        end
        ap_ST_fsm_state280 : begin
            ap_NS_fsm = ap_ST_fsm_state281;
        end
        ap_ST_fsm_state281 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln39_1_fu_347_p2 = (32'd12345 + mul_ln39_1_reg_613);

assign add_ln39_fu_337_p2 = (32'd12345 + mul_ln39_reg_602);

assign and_ln156_fu_392_p2 = (or_ln156_fu_388_p2 & grp_fu_238_p2);

assign and_ln54_fu_538_p2 = (or_ln54_fu_532_p2 & grp_fu_238_p2);

assign and_ln58_fu_496_p2 = (or_ln58_fu_490_p2 & grp_fu_238_p2);

assign and_ln83_fu_588_p2 = (or_ln83_fu_584_p2 & grp_fu_238_p2);

assign and_ln94_fu_442_p2 = (or_ln94_fu_436_p2 & grp_fu_238_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state139 = ap_CS_fsm[32'd138];

assign ap_CS_fsm_state140 = ap_CS_fsm[32'd139];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state149 = ap_CS_fsm[32'd148];

assign ap_CS_fsm_state150 = ap_CS_fsm[32'd149];

assign ap_CS_fsm_state155 = ap_CS_fsm[32'd154];

assign ap_CS_fsm_state156 = ap_CS_fsm[32'd155];

assign ap_CS_fsm_state157 = ap_CS_fsm[32'd156];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state187 = ap_CS_fsm[32'd186];

assign ap_CS_fsm_state188 = ap_CS_fsm[32'd187];

assign ap_CS_fsm_state189 = ap_CS_fsm[32'd188];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state219 = ap_CS_fsm[32'd218];

assign ap_CS_fsm_state220 = ap_CS_fsm[32'd219];

assign ap_CS_fsm_state224 = ap_CS_fsm[32'd223];

assign ap_CS_fsm_state225 = ap_CS_fsm[32'd224];

assign ap_CS_fsm_state226 = ap_CS_fsm[32'd225];

assign ap_CS_fsm_state231 = ap_CS_fsm[32'd230];

assign ap_CS_fsm_state232 = ap_CS_fsm[32'd231];

assign ap_CS_fsm_state236 = ap_CS_fsm[32'd235];

assign ap_CS_fsm_state237 = ap_CS_fsm[32'd236];

assign ap_CS_fsm_state238 = ap_CS_fsm[32'd237];

assign ap_CS_fsm_state239 = ap_CS_fsm[32'd238];

assign ap_CS_fsm_state240 = ap_CS_fsm[32'd239];

assign ap_CS_fsm_state270 = ap_CS_fsm[32'd269];

assign ap_CS_fsm_state271 = ap_CS_fsm[32'd270];

assign ap_CS_fsm_state275 = ap_CS_fsm[32'd274];

assign ap_CS_fsm_state276 = ap_CS_fsm[32'd275];

assign ap_CS_fsm_state281 = ap_CS_fsm[32'd280];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign bitcast_ln156_fu_358_p1 = reg_301;

assign bitcast_ln54_2_fu_550_p1 = xor_ln54_fu_544_p2;

assign bitcast_ln54_fu_502_p1 = reg_301;

assign bitcast_ln58_fu_460_p1 = reg_272;

assign bitcast_ln83_fu_554_p1 = phi_ln54_reg_168;

assign bitcast_ln94_fu_406_p1 = x_assign_reg_67;

assign i_1_fu_454_p2 = (i_0_i_reg_125 + 4'd1);

assign i_fu_321_p2 = (i_0_reg_56 + 4'd1);

assign icmp_ln108_fu_448_p2 = ((i_0_i_reg_125 == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln152_fu_315_p2 = ((i_0_reg_56 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln156_1_fu_382_p2 = ((trunc_ln156_fu_372_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln156_fu_376_p2 = ((tmp_12_fu_362_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln54_2_fu_526_p2 = ((trunc_ln54_fu_516_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_520_p2 = ((tmp_16_fu_506_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln58_1_fu_484_p2 = ((trunc_ln58_fu_474_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_478_p2 = ((tmp_14_fu_464_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln83_2_fu_578_p2 = ((trunc_ln83_fu_568_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_572_p2 = ((tmp_18_fu_558_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln94_1_fu_430_p2 = ((trunc_ln94_fu_420_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_424_p2 = ((tmp_fu_410_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign mul_ln39_1_fu_342_p2 = ($signed({{1'b0}, {32'd1103515245}}) * $signed(add_ln39_reg_607));

assign mul_ln39_fu_331_p1 = seed;

assign mul_ln39_fu_331_p2 = ($signed({{1'b0}, {32'd1103515245}}) * $signed(mul_ln39_fu_331_p1));

assign or_ln156_fu_388_p2 = (icmp_ln156_reg_638 | icmp_ln156_1_reg_643);

assign or_ln54_fu_532_p2 = (icmp_ln54_fu_520_p2 | icmp_ln54_2_fu_526_p2);

assign or_ln58_fu_490_p2 = (icmp_ln58_fu_478_p2 | icmp_ln58_1_fu_484_p2);

assign or_ln83_fu_584_p2 = (icmp_ln83_reg_680 | icmp_ln83_2_reg_685);

assign or_ln94_fu_436_p2 = (icmp_ln94_fu_424_p2 | icmp_ln94_1_fu_430_p2);

assign tmp_12_fu_362_p4 = {{bitcast_ln156_fu_358_p1[62:52]}};

assign tmp_14_fu_464_p4 = {{bitcast_ln58_fu_460_p1[62:52]}};

assign tmp_16_fu_506_p4 = {{bitcast_ln54_fu_502_p1[62:52]}};

assign tmp_18_fu_558_p4 = {{bitcast_ln83_fu_554_p1[62:52]}};

assign tmp_fu_410_p4 = {{bitcast_ln94_fu_406_p1[62:52]}};

assign trunc_ln156_fu_372_p1 = bitcast_ln156_fu_358_p1[51:0];

assign trunc_ln54_fu_516_p1 = bitcast_ln54_fu_502_p1[51:0];

assign trunc_ln58_fu_474_p1 = bitcast_ln58_fu_460_p1[51:0];

assign trunc_ln83_fu_568_p1 = bitcast_ln83_fu_554_p1[51:0];

assign trunc_ln94_fu_420_p1 = bitcast_ln94_fu_406_p1[51:0];

assign x_1_fu_398_p3 = ((and_ln156_fu_392_p2[0:0] === 1'b1) ? reg_285 : x_0_reg_79);

assign xor_ln54_fu_544_p2 = (bitcast_ln54_fu_502_p1 ^ 64'd9223372036854775808);

endmodule //gaussian_box_muller
