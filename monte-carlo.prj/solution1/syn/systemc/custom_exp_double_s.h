// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _custom_exp_double_s_HH_
#define _custom_exp_double_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "dut_dadd_64ns_64ncud.h"
#include "dut_dmul_64ns_64ndEe.h"
#include "dut_ddiv_64ns_64neOg.h"
#include "dut_sitodp_32ns_6hbi.h"

namespace ap_rtl {

struct custom_exp_double_s : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<64> > x;
    sc_out< sc_lv<64> > ap_return;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    custom_exp_double_s(sc_module_name name);
    SC_HAS_PROCESS(custom_exp_double_s);

    ~custom_exp_double_s();

    sc_trace_file* mVcdFile;

    dut_dadd_64ns_64ncud<1,5,64,64,64>* dut_dadd_64ns_64ncud_U17;
    dut_dmul_64ns_64ndEe<1,6,64,64,64>* dut_dmul_64ns_64ndEe_U18;
    dut_ddiv_64ns_64neOg<1,31,64,64,64>* dut_ddiv_64ns_64neOg_U19;
    dut_sitodp_32ns_6hbi<1,6,32,64>* dut_sitodp_32ns_6hbi_U20;
    sc_signal< sc_lv<49> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > i_fu_87_p2;
    sc_signal< sc_lv<4> > i_reg_106;
    sc_signal< sc_lv<1> > icmp_ln127_fu_81_p2;
    sc_signal< sc_lv<64> > grp_fu_73_p1;
    sc_signal< sc_lv<64> > tmp_reg_111;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<64> > grp_fu_69_p2;
    sc_signal< sc_lv<64> > tmp_s_reg_116;
    sc_signal< sc_logic > ap_CS_fsm_state38;
    sc_signal< sc_lv<64> > grp_fu_64_p2;
    sc_signal< sc_lv<64> > term_reg_121;
    sc_signal< sc_logic > ap_CS_fsm_state44;
    sc_signal< sc_lv<64> > grp_fu_59_p2;
    sc_signal< sc_logic > ap_CS_fsm_state49;
    sc_signal< sc_lv<64> > term_0_reg_24;
    sc_signal< sc_lv<64> > result_0_reg_36;
    sc_signal< sc_lv<4> > i_0_reg_48;
    sc_signal< sc_logic > ap_CS_fsm_state45;
    sc_signal< sc_logic > ap_CS_fsm_state39;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<32> > grp_fu_73_p0;
    sc_signal< sc_lv<64> > ap_return_preg;
    sc_signal< sc_lv<49> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<49> ap_ST_fsm_state1;
    static const sc_lv<49> ap_ST_fsm_state2;
    static const sc_lv<49> ap_ST_fsm_state3;
    static const sc_lv<49> ap_ST_fsm_state4;
    static const sc_lv<49> ap_ST_fsm_state5;
    static const sc_lv<49> ap_ST_fsm_state6;
    static const sc_lv<49> ap_ST_fsm_state7;
    static const sc_lv<49> ap_ST_fsm_state8;
    static const sc_lv<49> ap_ST_fsm_state9;
    static const sc_lv<49> ap_ST_fsm_state10;
    static const sc_lv<49> ap_ST_fsm_state11;
    static const sc_lv<49> ap_ST_fsm_state12;
    static const sc_lv<49> ap_ST_fsm_state13;
    static const sc_lv<49> ap_ST_fsm_state14;
    static const sc_lv<49> ap_ST_fsm_state15;
    static const sc_lv<49> ap_ST_fsm_state16;
    static const sc_lv<49> ap_ST_fsm_state17;
    static const sc_lv<49> ap_ST_fsm_state18;
    static const sc_lv<49> ap_ST_fsm_state19;
    static const sc_lv<49> ap_ST_fsm_state20;
    static const sc_lv<49> ap_ST_fsm_state21;
    static const sc_lv<49> ap_ST_fsm_state22;
    static const sc_lv<49> ap_ST_fsm_state23;
    static const sc_lv<49> ap_ST_fsm_state24;
    static const sc_lv<49> ap_ST_fsm_state25;
    static const sc_lv<49> ap_ST_fsm_state26;
    static const sc_lv<49> ap_ST_fsm_state27;
    static const sc_lv<49> ap_ST_fsm_state28;
    static const sc_lv<49> ap_ST_fsm_state29;
    static const sc_lv<49> ap_ST_fsm_state30;
    static const sc_lv<49> ap_ST_fsm_state31;
    static const sc_lv<49> ap_ST_fsm_state32;
    static const sc_lv<49> ap_ST_fsm_state33;
    static const sc_lv<49> ap_ST_fsm_state34;
    static const sc_lv<49> ap_ST_fsm_state35;
    static const sc_lv<49> ap_ST_fsm_state36;
    static const sc_lv<49> ap_ST_fsm_state37;
    static const sc_lv<49> ap_ST_fsm_state38;
    static const sc_lv<49> ap_ST_fsm_state39;
    static const sc_lv<49> ap_ST_fsm_state40;
    static const sc_lv<49> ap_ST_fsm_state41;
    static const sc_lv<49> ap_ST_fsm_state42;
    static const sc_lv<49> ap_ST_fsm_state43;
    static const sc_lv<49> ap_ST_fsm_state44;
    static const sc_lv<49> ap_ST_fsm_state45;
    static const sc_lv<49> ap_ST_fsm_state46;
    static const sc_lv<49> ap_ST_fsm_state47;
    static const sc_lv<49> ap_ST_fsm_state48;
    static const sc_lv<49> ap_ST_fsm_state49;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_25;
    static const sc_lv<32> ap_const_lv32_2B;
    static const sc_lv<32> ap_const_lv32_30;
    static const sc_lv<64> ap_const_lv64_3FF0000000000000;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_2C;
    static const sc_lv<32> ap_const_lv32_26;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<4> ap_const_lv4_B;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state38();
    void thread_ap_CS_fsm_state39();
    void thread_ap_CS_fsm_state44();
    void thread_ap_CS_fsm_state45();
    void thread_ap_CS_fsm_state49();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_grp_fu_73_p0();
    void thread_i_fu_87_p2();
    void thread_icmp_ln127_fu_81_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
